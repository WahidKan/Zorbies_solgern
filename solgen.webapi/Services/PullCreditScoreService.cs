using Microsoft.AspNetCore.Http;
using Microsoft.Extensions.Configuration;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using Solgen.Core;
using Solgen.Core.Models;
using Solgen.Repository;
using Solgen.Service;
using Solgen.WebApi.HubConfig;
using Solgen.WebApi.Models;
using Solgen.WebApi.Models.Equifax;
using Solgen.WebApi.Models.Equifax.CreditReport.Request;
using Solgen.WebApi.Models.Equifax.CreditReport.Response;
using Solgen.WebApi.Models.Equifax.FileStatus.Response;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using System.Web;

namespace Solgen.WebApi.Services
{
    public class PullCreditScoreService : IPullCreditScoreService
    {
        //private readonly ILoanApplicationService _loanService;
        //private readonly IRealTimeService _realTimeService;
        //private readonly ICommonService _commonService;
        //private readonly IHttpContextAccessor _httpContext;
        //private readonly IPullCreditScoreService _pullCreditScoreService;
        //private readonly ILoanApplicationService _loanApplicationService;
        //private readonly ICreditScoreService _creditScoreService;
        //private readonly ICreditScoreRawDataService _creditScoreRawDataService;
        //private readonly ICreditBureauHistoryService _creditBureauHistoryService;
        //private readonly ICreditBureauMasterService _creditBureauMasterService;
        //private readonly IWebMergeService _webMergeService;
        //private readonly IEmailSettingsService _emailSettingsService;
        //private readonly IConfiguration _config;
        public ILogService logService { get; }
        private readonly ICreditScoreRepository _creditScoreRepository;
        private EquifaxCredentials equifaxCredentials;
        public PullCreditScoreService(ICreditScoreRepository creditScoreRepository
            //ICommonService commonService, IHttpContextAccessor httpContext,
            //IPullCreditScoreService pullCreditScoreService, ILoanApplicationService loanApplicationService,
            //ICreditScoreService creditScoreService, ICreditScoreRawDataService creditScoreRawDataService,
            //ICreditBureauHistoryService creditBureauHistoryService, ICreditBureauMasterService creditBureauMasterService,
            //ILoanApplicationService loanService, IRealTimeService realTimeService,
            //ILogService logService, 
            //IWebMergeService webMergeService,
            //IEmailSettingsService emailSettingsService,
            //IConfiguration config
            )
        {
            //_commonService = commonService;
            //_httpContext = httpContext;
            //_pullCreditScoreService = pullCreditScoreService;
            //_loanApplicationService = loanApplicationService;
            //_creditScoreService = creditScoreService;
            //_creditScoreRawDataService = creditScoreRawDataService;
            //_creditBureauHistoryService = creditBureauHistoryService;
            //_creditBureauMasterService = creditBureauMasterService;
            //_loanService = loanService;
            //_realTimeService = realTimeService;
            //_webMergeService = webMergeService;
            //this.logService = logService;
            //_emailSettingsService = emailSettingsService;
            //_config = config;
            equifaxCredentials = new EquifaxCredentials();
            _creditScoreRepository = creditScoreRepository;

            equifaxCredentials.BaseUrl = CommonSettings.AppSetting["CommonSettings:equifaxCredentialsBaseUrl"];
            equifaxCredentials.Username = CommonSettings.AppSetting["CommonSettings:equifaxCredentialsUsername"];
            equifaxCredentials.Password = CommonSettings.AppSetting["CommonSettings:equifaxCredentialsPassword"];
            equifaxCredentials.MemberNumber = CommonSettings.AppSetting["CommonSettings:equifaxCredentialsMemberNumber"];
            equifaxCredentials.SecurityCode = CommonSettings.AppSetting["CommonSettings:equifaxCredentialsSecurityCode"];
        }
        public async Task<CreditScore> PullCreditScore(string Bureau, ApplicantRequestModel request)
        {
            string LoanhomiEnvironmentForEquifax = CommonSettings.AppSetting["CommonSettings:LoanhomiEnvironmentForEquifax"];
            if (Bureau == "Equifax")
            {
                if (LoanhomiEnvironmentForEquifax == "STAGE")
                {
                    if (request.SSN.StartsWith("00"))
                    {
                        return await PullEquifaxCreditScoreStage(request);
                    }
                    else
                    {
                        return await PullEquifaxCreditScore(request);
                    }
                }
                else if (LoanhomiEnvironmentForEquifax == "LIVE")
                {
                    return await PullEquifaxCreditScore(request);
                }
            }
            return null;
        }
        public async Task<EquifaxFileStatusResponse> CheckFileStatus(string Bureau, ApplicantRequestModel request)
        {
            if (Bureau == "Equifax")
            {
                return await CheckEquifaxFileStatus(request);
            }
            return null;
        }

        private async Task<EquifaxAuthResponse> AuthenticateEquifax(EquifaxCredentials equifaxCredentials, string scope)
        {
            string authUrl = $"{equifaxCredentials.BaseUrl}v2/oauth/token";

            string svcCredentials = Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(equifaxCredentials.Username + ":" + equifaxCredentials.Password));

            Dictionary<string, string> authParams = new Dictionary<string, string>();
            authParams.Add("grant_type", "client_credentials");
            authParams.Add("scope", scope);

            FormUrlEncodedContent content = new FormUrlEncodedContent(authParams);

            HttpClient client = new HttpClient();
            client.DefaultRequestHeaders.Add("Authorization", "Basic " + svcCredentials);

            client.DefaultRequestHeaders.Add("Method", "POST");

            var response = await client.PostAsync(authUrl, content);

            if (response.IsSuccessStatusCode)
            {
                var data = JsonConvert.DeserializeObject<EquifaxAuthResponse>(await response.Content.ReadAsStringAsync());
                return data;
            }

            return null;
        }

        private async Task<CreditScore> PullEquifaxCreditScore(ApplicantRequestModel request)
        {
            try
            {
                var data = await AuthenticateEquifax(this.equifaxCredentials, "https://api.equifax.com/business/consumer-credit/v1");

                HttpClientHandler handler = new HttpClientHandler()
                {
                    AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate
                };

                var client = new HttpClient(handler);

                string creditScoreUrl = $"{equifaxCredentials.BaseUrl}business/consumer-credit/v1/reports/credit-report";

                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", data.access_token);
                client.DefaultRequestHeaders.Connection.Add("keep-alive");
                //client.Timeout = TimeSpan.FromSeconds(60);

                var creditReportRequestModel = new EquifaxCreditReportRequest()
                {
                    Consumers = new Models.Equifax.CreditReport.Request.Consumers()
                    {
                        Name = new Name[]
                        {
                            new Name()
                            {
                                Identifier = request.Identifier,
                                FirstName = request.FirstName,
                                LastName = request.LastName
                            }
                        },
                        SocialNum = new SocialNumber[]
                        {
                            new SocialNumber()
                            {
                                Identifier = request.Identifier,
                                Number = request.SSN == null ? "" : request.SSN.Replace("-", "")
                            }
                        },
                        DateOfBirth = request.DOB == null ? "" : $"{(request.DOB?.Month <= 9 ? string.Format("0{0}", request.DOB?.Month) : request.DOB?.Month.ToString())}{(request.DOB?.Day <= 9 ? string.Format("0{0}", request.DOB?.Day) : request.DOB?.Day.ToString())}{request.DOB?.Year}",
                        Addresses = new Models.Equifax.CreditReport.Request.Address[]
                        {
                            new Models.Equifax.CreditReport.Request.Address()
                            {
                                Identifier=request.Identifier,
                                City = request.City,
                                State = request.State
                            }
                        }//,
                        //PhoneNumbers = new PhoneNumber[]
                        //{
                        //},
                        //Employments = new Employments()
                        //{
                        //}
                    },
                    CustomerReferenceIdentifier = "JSON",
                    ExternalDataSources = new ExternalDataSources()
                    {
                        AlternateDataSources = new Models.Equifax.CreditReport.Request.AlternateDataSources()
                        {
                            ConsumerReportIndicator = true
                        }
                    },
                    CustomerConfiguration = new CustomerConfiguration()
                    {
                        EquifaxUsConsumerCreditReport = new Models.Equifax.CreditReport.Request.EquifaxUsConsumerCreditReport()
                        {
                            MemberNumber = equifaxCredentials.MemberNumber,
                            SecurityCode = equifaxCredentials.SecurityCode,
                            CodeDescriptionRequired = true,
                            MultipleReportIndicator = "1",
                            EcoaInquiryType = "Individual",
                            OptionalFeatureCode = new string[] { "X" }
                        }
                    }
                };

                var payload = new StringContent(JsonConvert.SerializeObject(creditReportRequestModel));
                payload.Headers.ContentType = new MediaTypeWithQualityHeaderValue("application/json");
                var creditScoreResponse = await client.PostAsync(creditScoreUrl, payload);

                if (creditScoreResponse.IsSuccessStatusCode)
                {
                    string rawData = await creditScoreResponse.Content.ReadAsStringAsync();
                    var c = JsonConvert.DeserializeObject<EquifaxCreditReportResponse>(rawData);

                    CreditScore creditScore = new CreditScore();
                    List<Models.Trade> trades = new List<Models.Trade>();
                    List<Models.Employment> employments = new List<Models.Employment>();

                    if (c.Consumers.EquifaxUsConsumerCreditReport[0].Models == null)
                    {
                        creditScore.ApplicantScore = null;
                    }
                    else
                    {
                        if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification != null)
                        {
                            if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum == null || c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.InquirySocialNum == c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum)
                            {
                                if (c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Score == null)
                                {
                                    if(c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Rejects == null)
                                    {
                                        creditScore.ApplicantScore = null;
                                    }
                                    else
                                    {
                                        if (c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Rejects.Where(r => r.Code == "M").Count() > 0)
                                        {
                                            creditScore.ApplicantScore = 0;
                                        }
                                        if (c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Rejects.Where(r => r.Code == "O").Count() > 0)
                                        {
                                            creditScore.ApplicantScore = 0;
                                        }
                                    }
                                }
                                else
                                {
                                    creditScore.ApplicantScore = c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Score;
                                }
                            }
                            else
                            {
                                //Inquiry SSN and Subject SSN mismatch
                                creditScore.ApplicantScore = -10;
                            }
                        }
                    }

                    if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification != null)
                    {
                        if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum == null || c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.InquirySocialNum == c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum)
                        {
                            creditScore.RawData = rawData;

                            if (c.Consumers.EquifaxUsConsumerCreditReport[0].Trades != null)
                            {
                                foreach (var item in c.Consumers.EquifaxUsConsumerCreditReport[0].Trades)
                                {
                                    Models.Trade trade = new Models.Trade()
                                    {
                                        Source = "Equifax",
                                        Include = true,
                                        Category = "",
                                        Creditor = item.CustomerName,
                                        CreditorAccountNumber = item.AccountNumber,
                                        CreditorCustomerNumber = item.CustomerNumber,
                                        Joint = false,
                                        Balance = Convert.ToDecimal(item.Balance),
                                        Amount = Convert.ToDecimal(item.ScheduledPaymentAmount),
                                        AdjAmount = Convert.ToDecimal(item.ActualPaymentAmount),
                                        LastPaymentDate = null
                                    };

                                    if (!string.IsNullOrEmpty(item.DateOpened))
                                    {
                                        trade.DateOpened = DateTime.ParseExact(ConvertDate(item.DateOpened), "MMddyyyy", CultureInfo.InvariantCulture);
                                    }

                                    if (!string.IsNullOrEmpty(item.DateReported))
                                    {
                                        trade.DateReported = DateTime.ParseExact(ConvertDate(item.DateReported), "MMddyyyy", CultureInfo.InvariantCulture);
                                    }

                                    if (!string.IsNullOrEmpty(item.LastPaymentDate))
                                    {
                                        trade.LastPaymentDate = DateTime.ParseExact(ConvertDate(item.LastPaymentDate), "MMddyyyy", CultureInfo.InvariantCulture);
                                    }

                                    if (item.Rate == null)
                                    {
                                        trade.Rating = null;
                                    }
                                    else
                                    {
                                        trade.Rating = item.Rate.Code;
                                    }

                                    if (item.AccountDesignator != null)
                                    {
                                        trade.Joint = item.AccountDesignator.Code == "J" ? true : false;
                                    }

                                    if(item.PortfolioTypeCode != null)
                                    {
                                        trade.PortfolioType = item.PortfolioTypeCode.Code;
                                    }

                                    trades.Add(trade);
                                }
                            }

                            if (c.Consumers.EquifaxUsConsumerCreditReport[0].Employments != null)
                            {
                                foreach (var item in c.Consumers.EquifaxUsConsumerCreditReport[0].Employments)
                                {
                                    Models.Employment employment = new Models.Employment()
                                    {
                                        Identifier = item.Identifier,
                                        Employer = item.Employer,
                                        Occupation = item.Occupation,
                                        DateFirstReported = item.DateFirstReported,
                                        DateLastReported = item.DateLastReported
                                    };
                                    employments.Add(employment);
                                }
                            }
                        }
                    }

                    creditScore.Trades = trades.ToArray();
                    creditScore.Employments = employments.ToArray();

                    if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification != null)
                    {
                        creditScore.NeedsAdminReview = c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum == null ? true : false;
                    }

                    if(c.Consumers.EquifaxUsConsumerCreditReport[0].HitCode != null)
                    {
                        if(c.Consumers.EquifaxUsConsumerCreditReport[0].HitCode.Code == "G")
                        {
                            //Frozen
                            creditScore.ApplicantScore = -11;
                            creditScore.RawData = rawData;
                        }
                        if(c.Consumers.EquifaxUsConsumerCreditReport[0].HitCode.Code == "J")
                        {
                            creditScore.ApplicantScore = -12;
                            creditScore.RawData = rawData;
                        }
                    }

                    return creditScore;
                }
                else
                {
                    CreditScore creditScore = new CreditScore();
                    creditScore.ApplicantScore = -2;
                    creditScore.RawData = creditScoreResponse.Content.ReadAsStringAsync().Result;
                    return creditScore;
                }
            }
            catch (Exception ex)
            {
                CreditScore creditScore = new CreditScore();
                creditScore.ApplicantScore = -2;
                creditScore.RawData = ex.Message;
                return creditScore;
            }
            return null;
        }

        private async Task<CreditScore> PullEquifaxCreditScoreStage(ApplicantRequestModel request)
        {
            var creditReportRequestModel = new EquifaxCreditReportRequest()
            {
                Consumers = new Models.Equifax.CreditReport.Request.Consumers()
                {
                    Name = new Name[]
                        {
                            new Name()
                            {
                                Identifier = request.Identifier,
                                FirstName = request.FirstName,
                                LastName = request.LastName
                            }
                        },
                    SocialNum = new SocialNumber[]
                        {
                            new SocialNumber()
                            {
                                Identifier = request.Identifier,
                                Number = request.SSN == null ? "" : request.SSN.Replace("-", "")
                            }
                        },
                    DateOfBirth = request.DOB == null ? "" : $"{(request.DOB?.Month <= 9 ? string.Format("0{0}", request.DOB?.Month) : request.DOB?.Month.ToString())}{(request.DOB?.Day <= 9 ? string.Format("0{0}", request.DOB?.Day) : request.DOB?.Day.ToString())}{request.DOB?.Year}",
                    Addresses = new Models.Equifax.CreditReport.Request.Address[]
                        {
                            new Models.Equifax.CreditReport.Request.Address()
                            {
                                Identifier=request.Identifier,
                                City = request.City,
                                State = request.State
                            }
                        }//,
                         //PhoneNumbers = new PhoneNumber[]
                         //{
                         //},
                         //Employments = new Employments()
                         //{
                         //}
                },
                CustomerReferenceIdentifier = "JSON",
                ExternalDataSources = new ExternalDataSources()
                {
                    AlternateDataSources = new Models.Equifax.CreditReport.Request.AlternateDataSources()
                    {
                        ConsumerReportIndicator = true
                    }
                },
                CustomerConfiguration = new CustomerConfiguration()
                {
                    EquifaxUsConsumerCreditReport = new Models.Equifax.CreditReport.Request.EquifaxUsConsumerCreditReport()
                    {
                        MemberNumber = equifaxCredentials.MemberNumber,
                        SecurityCode = equifaxCredentials.SecurityCode,
                        CodeDescriptionRequired = true,
                        MultipleReportIndicator = "1",
                        EcoaInquiryType = "Individual",
                        OptionalFeatureCode = new string[] { "X" }
                    }
                }
            };

            //string rawData = "{\n  \"status\": \"completed\",\n  \"consumers\": {\n    \"equifaxUSConsumerCreditReport\": [\n      {\n        \"identifier\": \"Individual Report 1\",\n        \"customerReferenceNumber\": \"JSON\",\n        \"customerNumber\": \"999XX00000\",\n        \"consumerReferralCode\": \"300\",\n        \"multipleReportIndicator\": \"F\",\n        \"ECOAInquiryType\": \"I\",\n        \"hitCode\": {\n          \"code\": \"1\",\n          \"description\": \"Hit\"\n        },\n        \"fileSinceDate\": \"09012002\",\n        \"lastActivityDate\": \"07072020\",\n        \"reportDate\": \"09092020\",\n        \"subjectName\": {\n          \"firstName\": \"SHEMICA\",\n          \"lastName\": \"XXSHJF\",\n          \"middleName\": \"FAYE\"\n        },\n        \"subjectSocialNum\": \"666795307\",\n        \"birthDate\": \"07281989\",\n        \"nameMatchFlags\": {\n          \"firstNameMatchFlag\": \"Y\",\n          \"lastNameMatchFlag\": \"Y\",\n          \"middleNameMatchFlag\": \"Y\"\n        },\n        \"doNotCombineIndicator\": \"C\",\n        \"addressDiscrepancyIndicator\": \"N\",\n        \"fraudIDScanAlertCodes\": [\n          {\n            \"code\": \"8\",\n            \"description\": \"UNABLE TO PERFORM TELEPHONE VALIDATION DUE TO INSUFFICIENT TELEPHONE INPUT\"\n          },\n          {\n            \"code\": \"L\",\n            \"description\": \"FRAUD VICTIM ALERT PRESENT IN DATABASE\"\n          }\n        ],\n        \"fraudVictimIndicator\": {\n          \"code\": \"V\",\n          \"description\": \"Fraud Victim Initial Alert\"\n        },\n        \"addresses\": [\n          {\n            \"addressType\": \"current\",\n            \"houseNumber\": \"7249\",\n            \"streetName\": \"PAJJ ZAFW\",\n            \"streetType\": \"LN\",\n            \"cityName\": \"HUMBLE\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77396\",\n            \"sourceOfAddress\": {\n              \"code\": \"C\",\n              \"description\": \"EQUIFAX\"\n            },\n            \"dateFirstReported\": \"12002018\",\n            \"dateLastReported\": \"07082020\",\n            \"addressLine1\": \"7249 PAJJ ZAFW LN\"\n          },\n          {\n            \"addressType\": \"former\",\n            \"houseNumber\": \"3981\",\n            \"streetName\": \"OVNYH\",\n            \"streetType\": \"RD\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77053\",\n            \"sourceOfAddress\": {\n              \"code\": \"C\",\n              \"description\": \"EQUIFAX\"\n            },\n            \"dateFirstReported\": \"12002018\",\n            \"dateLastReported\": \"07102020\",\n            \"addressLine1\": \"3981 OVNYH RD\"\n          },\n          {\n            \"addressType\": \"additional\",\n            \"houseNumber\": \"2323\",\n            \"streetName\": \"LYVVMQHVS\",\n            \"streetType\": \"ST\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77045\",\n            \"sourceOfAddress\": {\n              \"code\": \"C\",\n              \"description\": \"EQUIFAX\"\n            },\n            \"dateFirstReported\": \"06002017\",\n            \"dateLastReported\": \"07072020\",\n            \"addressLine1\": \"2323 LYVVMQHVS ST\"\n          },\n          {\n            \"addressType\": \"additional\",\n            \"houseNumber\": \"3288\",\n            \"streetName\": \"VJC QDISAQU\",\n            \"streetType\": \"TRL\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77054\",\n            \"sourceOfAddress\": {\n              \"code\": \"T\",\n              \"description\": \"AUT**\"\n            },\n            \"dateFirstReported\": \"05002017\",\n            \"dateLastReported\": \"05042017\",\n            \"addressLine1\": \"3288 VJC QDISAQU TRL\"\n          },\n          {\n            \"addressType\": \"additional\",\n            \"houseNumber\": \"42483\",\n            \"streetName\": \"RIJJQZAFW\",\n            \"streetType\": \"LN APT 49\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77077\",\n            \"sourceOfAddress\": {\n              \"code\": \"C\",\n              \"description\": \"EQUIFAX\"\n            },\n            \"dateFirstReported\": \"05002017\",\n            \"dateLastReported\": \"07072020\",\n            \"addressLine1\": \"42483 RIJJQZAFW LN APT 49\"\n          },\n          {\n            \"addressType\": \"additional\",\n            \"houseNumber\": \"5887\",\n            \"streetName\": \"LFJJIAYF\",\n            \"streetType\": \"BLVD APT 243\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77081\",\n            \"sourceOfAddress\": {\n              \"code\": \"T\",\n              \"description\": \"AUT**\"\n            },\n            \"dateFirstReported\": \"03002017\",\n            \"dateLastReported\": \"03062017\",\n            \"addressLine1\": \"5887 LFJJIAYF BLVD APT 243\"\n          },\n          {\n            \"addressType\": \"additional\",\n            \"houseNumber\": \"3981\",\n            \"streetName\": \"HARRISK\",\n            \"streetType\": \"DR\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77045\",\n            \"sourceOfAddress\": {\n              \"code\": \"T\",\n              \"description\": \"AUT**\"\n            },\n            \"dateFirstReported\": \"02002017\",\n            \"dateLastReported\": \"605092020\",\n            \"addressLine1\": \"3981 HARRISK DR\"\n          },\n          {\n            \"addressType\": \"additional\",\n            \"houseNumber\": \"43349\",\n            \"streetName\": \"VYPISCK\",\n            \"streetType\": \"ST\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77085\",\n            \"sourceOfAddress\": {\n              \"code\": \"C\",\n              \"description\": \"EQUIFAX\"\n            },\n            \"dateFirstReported\": \"02002017\",\n            \"dateLastReported\": \"10062017\",\n            \"addressLine1\": \"43349 VYPISCK ST\"\n          },\n          {\n            \"addressType\": \"additional\",\n            \"houseNumber\": \"43118\",\n            \"streetName\": \"YVCFV QBNIYF\",\n            \"streetType\": \"DR\",\n            \"cityName\": \"HOUSTON\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77072\",\n            \"sourceOfAddress\": {\n              \"code\": \"C\",\n              \"description\": \"EQUIFAX\"\n            },\n            \"dateFirstReported\": \"02002017\",\n            \"dateLastReported\": \"10062017\",\n            \"addressLine1\": \"43118 YVCFV QBNIYF DR\"\n          }\n        ],\n        \"formerNames\": [\n          {\n            \"lastName\": \"XXSHJF\",\n            \"firstName\": \"FAYE\"\n          }\n        ],\n        \"employments\": [\n          {\n            \"identifier\": \"current\",\n            \"occupation\": \"HFIP JFICFY\",\n            \"employer\": \"IAX\"\n          },\n          {\n            \"identifier\": \"former\",\n            \"occupation\": \"QFYZAOF QDFOAIJAQH\",\n            \"employer\": \"IAX\"\n          }\n        ],\n        \"bankruptcies\": [\n          {\n            \"customerNumber\": \"605VF49449\",\n            \"type\": \"I\",\n            \"filer\": \"I\",\n            \"industryCode\": \"VF\",\n            \"currentIntentOrDispositionCode\": {\n              \"code\": \"K\",\n              \"description\": \"DISMSD/CLSD CH13\"\n            },\n            \"dispositionDate\": \"1018\",\n            \"dateFiled\": \"07212018\",\n            \"currentDispositionDate\": \"10062018\",\n            \"dateReported\": \"10072018\"\n          },\n          {\n            \"customerNumber\": \"605VF49449\",\n            \"type\": \"I\",\n            \"filer\": \"I\",\n            \"industryCode\": \"VF\",\n            \"currentIntentOrDispositionCode\": {\n              \"code\": \"C\",\n              \"description\": \"CH-13 FILED\"\n            },\n            \"dispositionDate\": \"0718\",\n            \"dateFiled\": \"03272018\",\n            \"currentDispositionDate\": \"07212018\",\n            \"dateReported\": \"07222018\"\n          }\n        ],\n        \"collections\": [\n          {\n            \"customerNumber\": \"683YC02136\",\n            \"clientNameOrNumber\": \"SPEEDY CASH 67\",\n            \"statusCode\": {\n              \"code\": \"D\",\n              \"description\": \"UNPAID\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"IP\",\n                \"description\": \"CONSUMER DISPUTES THIS ACCOUNT INFORMATION\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"IP\"\n            ],\n            \"indicator\": \"*\",\n            \"dateReported\": \"07032020\",\n            \"dateAssigned\": \"03162017\",\n            \"originalAmount\": 897,\n            \"statusDate\": \"07032020\",\n            \"balance\": 867,\n            \"dateOfFirstDelinquency\": \"01102017\",\n            \"accountDesignatorCode\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"creditorClassificationCode\": {\n              \"code\": \"12\",\n              \"description\": \"FINANCIAL\"\n            }\n          },\n          {\n            \"customerNumber\": \"668YC51199\",\n            \"clientNameOrNumber\": \"TARA ENERGY\",\n            \"statusCode\": {\n              \"code\": \"D\",\n              \"description\": \"UNPAID\"\n            },\n            \"indicator\": \"*\",\n            \"dateReported\": \"07112020\",\n            \"dateAssigned\": \"07112020\",\n            \"originalAmount\": 571,\n            \"statusDate\": \"07112020\",\n            \"balance\": 571,\n            \"dateOfFirstDelinquency\": \"09282019\",\n            \"accountDesignatorCode\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"creditorClassificationCode\": {\n              \"code\": \"10\",\n              \"description\": \"UTILITIES\"\n            }\n          }\n        ],\n        \"alertContacts\": [\n          {\n            \"alertType\": {\n              \"code\": \"E\",\n              \"description\": \"Extended Fraud\"\n            },\n            \"dateReported\": \"07162020\",\n            \"effectiveDate\": \"07162020\",\n            \"telephoneNumbers\": [\n              {\n                \"telephoneNumberType\": {\n                  \"code\": \"D\",\n                  \"description\": \"Daytime\"\n                },\n                \"telephoneNumber\": \"8325551212\"\n              },\n              {\n                \"telephoneNumberType\": {\n                  \"code\": \"E\",\n                  \"description\": \"Evening\"\n                },\n                \"telephoneNumber\": \"8325551212\"\n              }\n            ]\n          }\n        ],\n        \"trades\": [\n          {\n            \"customerNumber\": \"605FP49874\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"01\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"390\",\n            \"customerName\": \"HOUSTON FINANCE\",\n            \"dateReported\": \"07082020\",\n            \"dateOpened\": \"07032020\",\n            \"highCredit\": 213,\n            \"balance\": 213,\n            \"pastDueAmount\": 54,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 3,\n              \"description\": \"Not more than three payments past due\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"EP\",\n                \"description\": \"FIXED RATE\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"EP\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"01\",\n              \"description\": \"Unsecured\"\n            },\n            \"lastPaymentDate\": \"07002020\",\n            \"scheduledPaymentAmount\": 26,\n            \"termsDurationCode\": {\n              \"code\": \"8M\",\n              \"description\": \"Months\"\n            }\n          },\n          {\n            \"customerNumber\": \"632FP04018\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"01\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"000000791Z000\",\n            \"customerName\": \"WESTERN SHAMROCK\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"06142020\",\n            \"highCredit\": 190,\n            \"balance\": 190,\n            \"pastDueAmount\": 96,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 2,\n              \"description\": \"Not more than two payments past due\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"EP\",\n                \"description\": \"FIXED RATE\"\n              },\n              {\n                \"code\": \"JO\",\n                \"description\": \"NOTE LOAN\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"EP\",\n              \"JO\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"20\",\n              \"description\": \"Note Loan\"\n            },\n            \"lastPaymentDate\": \"06002020\",\n            \"scheduledPaymentAmount\": 38,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"5M\",\n              \"description\": \"Months\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"447FA02148\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"05\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"0000222 000\",\n            \"customerName\": \"STERLING CREDIT CORP\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"06282019\",\n            \"highCredit\": 20931,\n            \"balance\": 12513,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"AO\",\n                \"description\": \"AUTO\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"AO\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"00\"\n            },\n            \"lastPaymentDate\": \"07002020\",\n            \"scheduledPaymentAmount\": 498,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"42M\",\n              \"description\": \"Months\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"/\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"495BB06908\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"32\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"71000\",\n            \"thirtyDayCounter\": 0,\n            \"sixtyDayCounter\": 0,\n            \"ninetyDayCounter\": 8,\n            \"previousHighRate1\": 9,\n            \"previousHighDate1\": \"062020\",\n            \"previousHighRate2\": 9,\n            \"previousHighDate2\": \"052020\",\n            \"previousHighRate3\": 9,\n            \"previousHighDate3\": \"042020\",\n            \"24MonthPaymentHistory\": [\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"/\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              }\n            ],\n            \"customerName\": \"CRESCENT BANK & TRUS\",\n            \"dateReported\": \"07012020\",\n            \"dateOpened\": \"05082016\",\n            \"highCredit\": 16284,\n            \"balance\": 25631,\n            \"pastDueAmount\": 25631,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 9,\n              \"description\": \"Charge-off\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"DB\",\n                \"description\": \"CHARGED OFF ACCOUNT\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"DB\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"00\"\n            },\n            \"lastPaymentDate\": \"07002017\",\n            \"dateMajorDelinquencyFirstReported\": \"02002018\",\n            \"termsDurationCode\": {\n              \"code\": \"1M\",\n              \"description\": \"Months\"\n            },\n            \"originalChargeOffAmount\": 16284,\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"/\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              }\n            ],\n            \"previousHighRatePaymentHistory\": \"5\",\n            \"previousHighDatePaymentHistory\": \"112017\"\n          },\n          {\n            \"customerNumber\": \"605FP52271\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"01\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"8879000\",\n            \"customerName\": \"WORLD FINANCE #473\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"06142020\",\n            \"highCredit\": 760,\n            \"balance\": 760,\n            \"pastDueAmount\": 315,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 2,\n              \"description\": \"Not more than two payments past due\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"EE\",\n                \"description\": \"SECURED\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"EE\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"02\",\n              \"description\": \"Secured\"\n            },\n            \"scheduledPaymentAmount\": 95,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"8M\",\n              \"description\": \"Months\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"239FP00278\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"02\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"215000\",\n            \"customerName\": \"RFC 570\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"07282020\",\n            \"highCredit\": 408,\n            \"balance\": 403,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"EE\",\n                \"description\": \"SECURED\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"EE\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"02\",\n              \"description\": \"Secured\"\n            },\n            \"lastPaymentDate\": \"07002020\",\n            \"scheduledPaymentAmount\": 68,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"6M\",\n              \"description\": \"Months\"\n            }\n          },\n          {\n            \"customerNumber\": \"239FP00278\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"03\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"116000\",\n            \"customerName\": \"RFC 570\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"04162020\",\n            \"highCredit\": 408,\n            \"balance\": 0,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"FA\",\n                \"description\": \"CLOSED OR PAID ACCOUNT/ZERO BALANCE\"\n              },\n              {\n                \"code\": \"EE\",\n                \"description\": \"SECURED\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"FA\",\n              \"EE\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"02\",\n              \"description\": \"Secured\"\n            },\n            \"lastPaymentDate\": \"07002020\",\n            \"closedDate\": \"07002020\",\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"6M\",\n              \"description\": \"Months\"\n            },\n            \"activityDesignatorCode\": {\n              \"code\": \"B\",\n              \"description\": \"On behalf of another person\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"608FP05084\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"210\",\n            \"customerName\": \"FRIENDLY LOANS - HOU\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"07062020\",\n            \"highCredit\": 195,\n            \"balance\": 195,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"JO\",\n                \"description\": \"NOTE LOAN\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"JO\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"20\",\n              \"description\": \"Note Loan\"\n            },\n            \"lastPaymentDate\": \"07002020\",\n            \"scheduledPaymentAmount\": 39,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"5M\",\n              \"description\": \"Months\"\n            }\n          },\n          {\n            \"customerNumber\": \"239FP00203\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"customerName\": \"SUN LOAN 350\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"07062020\",\n            \"highCredit\": 424,\n            \"balance\": 424,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"JO\",\n                \"description\": \"NOTE LOAN\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"JO\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"20\",\n              \"description\": \"Note Loan\"\n            },\n            \"lastPaymentDate\": \"07002020\",\n            \"scheduledPaymentAmount\": 53,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"8M\",\n              \"description\": \"Months\"\n            }\n          },\n          {\n            \"customerNumber\": \"416FP14462\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"03\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"730\",\n            \"customerName\": \"SECURITY FINANCE\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"04162020\",\n            \"highCredit\": 483,\n            \"balance\": 345,\n            \"pastDueAmount\": 79,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 2,\n              \"description\": \"Not more than two payments past due\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"EX\",\n                \"description\": \"UNSECURED\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"EX\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"01\",\n              \"description\": \"Unsecured\"\n            },\n            \"lastPaymentDate\": \"06002020\",\n            \"scheduledPaymentAmount\": 69,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"7M\",\n              \"description\": \"Months\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"100FY00140\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"03\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"27950000\",\n            \"customerName\": \"ENHANCED ACQUISITION\",\n            \"dateReported\": \"07092020\",\n            \"dateOpened\": \"04282020\",\n            \"highCredit\": 668,\n            \"balance\": 668,\n            \"pastDueAmount\": 668,\n            \"portfolioTypeCode\": {\n              \"code\": \"O\",\n              \"description\": \"Open Account (entire balance is due upon demand)\"\n            },\n            \"rate\": {\n              \"code\": 6,\n              \"description\": \"Collection account (Enhanced Trade Only)\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"CZ\",\n                \"description\": \"COLLECTION ACCOUNT\"\n              },\n              {\n                \"code\": \"CD\",\n                \"description\": \"CUSTOMER HAS NOW LOCATED CONSUMER\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"CZ\",\n              \"CD\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"0C\",\n              \"description\": \"Debt Buyer Account\"\n            },\n            \"dateMajorDelinquencyFirstReported\": \"05002020\",\n            \"purchasedFromOrSoldCreditorIndicator\": {\n              \"code\": \"O\",\n              \"description\": \"Original Creditor\"\n            },\n            \"purchasedFromOrSoldCreditorName\": \"ACE CASH EXPRESS INC\",\n            \"creditorClassificationCode\": {\n              \"code\": \"12\",\n              \"description\": \"FINANCIAL\"\n            }\n          },\n          {\n            \"customerNumber\": \"682FA10529\",\n            \"monthsReviewed\": \"31\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"4120197681000\",\n            \"customerName\": \"PEAK ACCEPTANCE/CSC\",\n            \"dateReported\": \"07002020\",\n            \"dateOpened\": \"09002017\",\n            \"rate\": {\n              \"code\": 7,\n              \"description\": \"Included in Chapter 13\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"DO\",\n                \"description\": \"BANKRUPTCY CHAPTER 13\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"DO\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"00\"\n            },\n            \"lastPaymentDate\": \"05002019\",\n            \"dateMajorDelinquencyFirstReported\": \"01002018\",\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            }\n          },\n          {\n            \"customerNumber\": \"632FP04018\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"03\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"000000791Z000\",\n            \"customerName\": \"WESTERN SHAMROCK\",\n            \"dateReported\": \"06282020\",\n            \"dateOpened\": \"03232020\",\n            \"highCredit\": 190,\n            \"balance\": 0,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"CE\",\n                \"description\": \"REFINANCED\"\n              },\n              {\n                \"code\": \"EP\",\n                \"description\": \"FIXED RATE\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"CE\",\n              \"EP\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"20\",\n              \"description\": \"Note Loan\"\n            },\n            \"lastPaymentDate\": \"06002020\",\n            \"closedDate\": \"06002020\",\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"5M\",\n              \"description\": \"Months\"\n            },\n            \"activityDesignatorCode\": {\n              \"code\": \"R\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"605FP52271\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"05\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"8832000\",\n            \"customerName\": \"WORLD FINANCE #473\",\n            \"dateReported\": \"07282020\",\n            \"dateOpened\": \"02142020\",\n            \"highCredit\": 760,\n            \"balance\": 0,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"FA\",\n                \"description\": \"CLOSED OR PAID ACCOUNT/ZERO BALANCE\"\n              },\n              {\n                \"code\": \"EE\",\n                \"description\": \"SECURED\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"FA\",\n              \"EE\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"02\",\n              \"description\": \"Secured\"\n            },\n            \"lastPaymentDate\": \"06002020\",\n            \"closedDate\": \"06002020\",\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"8M\",\n              \"description\": \"Months\"\n            },\n            \"activityDesignatorCode\": {\n              \"code\": \"B\",\n              \"description\": \"On behalf of another person\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"605UG49478\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"6630000096379000\",\n            \"thirtyDayCounter\": 0,\n            \"sixtyDayCounter\": 0,\n            \"ninetyDayCounter\": 1,\n            \"previousHighRate1\": 9,\n            \"previousHighDate1\": \"042020\",\n            \"24MonthPaymentHistory\": [\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"/\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ],\n            \"customerName\": \"CENTERPOINT ENERGY E\",\n            \"dateReported\": \"05262020\",\n            \"dateOpened\": \"09222018\",\n            \"highCredit\": 393,\n            \"balance\": 425,\n            \"pastDueAmount\": 425,\n            \"portfolioTypeCode\": {\n              \"code\": \"O\",\n              \"description\": \"Open Account (entire balance is due upon demand)\"\n            },\n            \"rate\": {\n              \"code\": 9,\n              \"description\": \"Charge-off\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"DB\",\n                \"description\": \"CHARGED OFF ACCOUNT\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"DB\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"92\",\n              \"description\": \"Utility Company\"\n            },\n            \"dateMajorDelinquencyFirstReported\": \"04002020\",\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"originalChargeOffAmount\": 393,\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"9\",\n                \"description\": \"Charge-off\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"/\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"682UE04304\",\n            \"monthsReviewed\": \"11\",\n            \"accountNumber\": \"74496474000\",\n            \"customerName\": \"TXU ENERGY\",\n            \"dateReported\": \"05002020\",\n            \"dateOpened\": \"11002015\",\n            \"highCredit\": 1547,\n            \"balance\": 1547,\n            \"pastDueAmount\": 1547,\n            \"rate\": {\n              \"code\": 9,\n              \"description\": \"Charge-off\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"DB\",\n                \"description\": \"CHARGED OFF ACCOUNT\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"DB\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"92\",\n              \"description\": \"Utility Company\"\n            },\n            \"lastPaymentDate\": \"09002017\",\n            \"closedDate\": \"09002017\",\n            \"originalChargeOffAmount\": 1547\n          },\n          {\n            \"customerNumber\": \"682UE04304\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"74496475000\",\n            \"thirtyDayCounter\": 0,\n            \"sixtyDayCounter\": 0,\n            \"ninetyDayCounter\": 1,\n            \"previousHighRate1\": 9,\n            \"previousHighDate1\": \"082017\",\n            \"customerName\": \"TXU ENERGY\",\n            \"dateReported\": \"05262020\",\n            \"dateOpened\": \"11282015\",\n            \"highCredit\": 1547,\n            \"balance\": 1547,\n            \"pastDueAmount\": 1547,\n            \"portfolioTypeCode\": {\n              \"code\": \"O\",\n              \"description\": \"Open Account (entire balance is due upon demand)\"\n            },\n            \"rate\": {\n              \"code\": 9,\n              \"description\": \"Charge-off\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"DB\",\n                \"description\": \"CHARGED OFF ACCOUNT\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"DB\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"92\",\n              \"description\": \"Utility Company\"\n            },\n            \"lastPaymentDate\": \"11002015\",\n            \"dateMajorDelinquencyFirstReported\": \"08002017\",\n            \"originalChargeOffAmount\": 1547,\n            \"previousHighRatePaymentHistory\": \"9\",\n            \"previousHighDatePaymentHistory\": \"082017\"\n          },\n          {\n            \"customerNumber\": \"632FP04018\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"02\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"000000791Z000\",\n            \"customerName\": \"WESTERN SHAMROCK\",\n            \"dateReported\": \"03282020\",\n            \"dateOpened\": \"01132020\",\n            \"highCredit\": 195,\n            \"balance\": 0,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"CE\",\n                \"description\": \"REFINANCED\"\n              },\n              {\n                \"code\": \"EP\",\n                \"description\": \"FIXED RATE\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"CE\",\n              \"EP\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"20\",\n              \"description\": \"Note Loan\"\n            },\n            \"lastPaymentDate\": \"03002020\",\n            \"closedDate\": \"03002020\",\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"5M\",\n              \"description\": \"Months\"\n            },\n            \"activityDesignatorCode\": {\n              \"code\": \"R\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"605FP52271\",\n            \"automatedUpdateIndicator\": \"*\",\n            \"monthsReviewed\": \"05\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"8785000\",\n            \"customerName\": \"WORLD FINANCE #473\",\n            \"dateReported\": \"03282020\",\n            \"dateOpened\": \"10262019\",\n            \"highCredit\": 760,\n            \"balance\": 0,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"FA\",\n                \"description\": \"CLOSED OR PAID ACCOUNT/ZERO BALANCE\"\n              },\n              {\n                \"code\": \"EE\",\n                \"description\": \"SECURED\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"FA\",\n              \"EE\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"02\",\n              \"description\": \"Secured\"\n            },\n            \"lastPaymentDate\": \"02002020\",\n            \"closedDate\": \"02002020\",\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"8M\",\n              \"description\": \"Months\"\n            },\n            \"activityDesignatorCode\": {\n              \"code\": \"B\",\n              \"description\": \"On behalf of another person\"\n            },\n            \"paymentHistory1to24\": [\n              {\n                \"code\": \"*\",\n                \"description\": \"Rate/Status was not available for that month\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \"1\",\n                \"description\": \"Pays account as agreed\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              },\n              {\n                \"code\": \" \",\n                \"description\": \"Not populated based on the Date Open(payment history will only be populated for each of the months that the account has been open)\"\n              }\n            ]\n          },\n          {\n            \"customerNumber\": \"845FZ00120\",\n            \"monthsReviewed\": \"16\",\n            \"accountDesignator\": {\n              \"code\": \"I\",\n              \"description\": \"Individual Account\"\n            },\n            \"accountNumber\": \"30304410000\",\n            \"customerName\": \"SALLIE MAE\",\n            \"dateReported\": \"10062019\",\n            \"dateOpened\": \"04062011\",\n            \"highCredit\": 1312,\n            \"balance\": 0,\n            \"portfolioTypeCode\": {\n              \"code\": \"I\",\n              \"description\": \"Instalment (fixed number of payments)\"\n            },\n            \"rate\": {\n              \"code\": 1,\n              \"description\": \"Pays account as agreed\"\n            },\n            \"narrativeCodes\": [\n              {\n                \"code\": \"BC\",\n                \"description\": \"ACCOUNT TRANSFERRED OR SOLD\"\n              }\n            ],\n            \"rawNarrativeCodes\": [\n              \"BC\"\n            ],\n            \"accountTypeCode\": {\n              \"code\": \"12\",\n              \"description\": \"Education Loan\"\n            },\n            \"closedDate\": \"03002013\",\n            \"actualPaymentAmount\": 0,\n            \"scheduledPaymentAmount\": 0,\n            \"termsFrequencyCode\": {\n              \"code\": \"M\",\n              \"description\": \"Monthly (due every month)\"\n            },\n            \"termsDurationCode\": {\n              \"code\": \"13M\",\n              \"description\": \"Months\"\n            },\n            \"activityDesignatorCode\": {\n              \"code\": \"T\",\n              \"description\": \"Terminated\"\n            }\n          }\n        ],\n        \"inquiries\": [\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AN\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"990AN88973\",\n            \"customerName\": \"TMPCKCADIL\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"682FA10627\",\n            \"customerName\": \"GMFNANCIAL\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"180FA07400\",\n            \"customerName\": \"CARFINANCE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"BB\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"636BB51827\",\n            \"customerName\": \"53 BANK NA\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"BB\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"495BB06908\",\n            \"customerName\": \"CRESCNT BK\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AU\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"565AU00124\",\n            \"customerName\": \"DRIVEWPRID\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"190FA01104\",\n            \"customerName\": \"PRESTIGE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"180FA02468\",\n            \"customerName\": \"CPS/MAIL\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AU\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"234AU16346\",\n            \"customerName\": \"FIXANDGOAU\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"217FA00932\",\n            \"customerName\": \"CENTRUSFN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AU\",\n            \"inquiryDate\": \"07282020\",\n            \"customerNumber\": \"234AU07611\",\n            \"customerName\": \"USACARSALE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"07172020\",\n            \"customerNumber\": \"243FP19017\",\n            \"customerName\": \"ONEMAIN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"BB\",\n            \"inquiryDate\": \"07162020\",\n            \"customerNumber\": \"164BB03779\",\n            \"customerName\": \"WF PLL\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"DM\",\n            \"inquiryDate\": \"07082020\",\n            \"customerNumber\": \"668DM04192\",\n            \"customerName\": \"7TH AVE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"07032020\",\n            \"customerNumber\": \"484FA00732\",\n            \"customerName\": \"CAPONEAUTO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"07022020\",\n            \"customerNumber\": \"495FA01455\",\n            \"customerName\": \"DEALERFUND\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"CG\",\n            \"inquiryDate\": \"06172020\",\n            \"customerNumber\": \"667CG35465\",\n            \"customerName\": \"CB/NY&CO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"06152020\",\n            \"customerNumber\": \"190FA01104\",\n            \"customerName\": \"PRESTIGE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"06152020\",\n            \"customerNumber\": \"484FA00732\",\n            \"customerName\": \"CAPONEAUTO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"06152020\",\n            \"customerNumber\": \"180FA02468\",\n            \"customerName\": \"CPS/MAIL\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UT\",\n            \"inquiryDate\": \"06142020\",\n            \"customerNumber\": \"910UT36354\",\n            \"customerName\": \"VERIZONWIR\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"05092020\",\n            \"customerNumber\": \"605FP49874\",\n            \"customerName\": \"HOU FINANC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"04282020\",\n            \"customerNumber\": \"605FP53458\",\n            \"customerName\": \"RFCHOUSTON\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04282020\",\n            \"customerNumber\": \"190FA01104\",\n            \"customerName\": \"PRESTIGE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"04272020\",\n            \"customerNumber\": \"605FP01417\",\n            \"customerName\": \"MAIN FINAN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04262020\",\n            \"customerNumber\": \"682FA10324\",\n            \"customerName\": \"QUALITYLEA\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"04162020\",\n            \"customerNumber\": \"605FP00054\",\n            \"customerName\": \"GBC FINANC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FF\",\n            \"inquiryDate\": \"04162020\",\n            \"customerNumber\": \"605FF03257\",\n            \"customerName\": \"SECURITY F\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"BB\",\n            \"inquiryDate\": \"04152020\",\n            \"customerNumber\": \"484BB04591\",\n            \"customerName\": \"CAP ONE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AU\",\n            \"inquiryDate\": \"04152020\",\n            \"customerNumber\": \"605AU58288\",\n            \"customerName\": \"AUTORANCH\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"04132020\",\n            \"customerNumber\": \"239FP00252\",\n            \"customerName\": \"HUGHES FI\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"04132020\",\n            \"customerNumber\": \"239FP00260\",\n            \"customerName\": \"COURTY CRD\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"04122020\",\n            \"customerNumber\": \"239FP00278\",\n            \"customerName\": \"REGIONAL\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"04122020\",\n            \"customerNumber\": \"243FP19017\",\n            \"customerName\": \"ONEMAIN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"ON\",\n            \"inquiryDate\": \"04042020\",\n            \"customerNumber\": \"243ON00879\",\n            \"customerName\": \"CCB/BML\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UZ\",\n            \"inquiryDate\": \"03242020\",\n            \"customerNumber\": \"990UZ75228\",\n            \"customerName\": \"COMCAST\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"03182020\",\n            \"customerNumber\": \"484FA00732\",\n            \"customerName\": \"CAPONEAUTO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"03162020\",\n            \"customerNumber\": \"401FA01342\",\n            \"customerName\": \"CARMAX\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"BB\",\n            \"inquiryDate\": \"03152020\",\n            \"customerNumber\": \"815BB54574\",\n            \"customerName\": \"BK OF AMER\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UZ\",\n            \"inquiryDate\": \"03072020\",\n            \"customerNumber\": \"910UZ52954\",\n            \"customerName\": \"DISH NETWK\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UZ\",\n            \"inquiryDate\": \"03072020\",\n            \"customerNumber\": \"990UZ75228\",\n            \"customerName\": \"COMCAST\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UZ\",\n            \"inquiryDate\": \"03012020\",\n            \"customerNumber\": \"990UZ75228\",\n            \"customerName\": \"COMCAST\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"02212020\",\n            \"customerNumber\": \"239FP00203\",\n            \"customerName\": \"SUN LOAN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"02212020\",\n            \"customerNumber\": \"605FP52814\",\n            \"customerName\": \"COVINGTON\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"BB\",\n            \"inquiryDate\": \"02132020\",\n            \"customerNumber\": \"682BB11893\",\n            \"customerName\": \"1 PREMIER\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FF\",\n            \"inquiryDate\": \"01242020\",\n            \"customerNumber\": \"605FF03257\",\n            \"customerName\": \"SECURITY F\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"01132020\",\n            \"customerNumber\": \"243FP19017\",\n            \"customerName\": \"ONEMAIN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"01102020\",\n            \"customerNumber\": \"605FP00054\",\n            \"customerName\": \"GBC FINANC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"HT\",\n            \"inquiryDate\": \"01072020\",\n            \"customerNumber\": \"362HT00039\",\n            \"customerName\": \"CBNA/BBY\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FF\",\n            \"inquiryDate\": \"01072020\",\n            \"customerNumber\": \"617FF00061\",\n            \"customerName\": \"CONN CREDI\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"11282019\",\n            \"customerNumber\": \"605FP00054\",\n            \"customerName\": \"GBC FINANC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"11282019\",\n            \"customerNumber\": \"605FP49874\",\n            \"customerName\": \"HOU FINANC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FF\",\n            \"inquiryDate\": \"11112019\",\n            \"customerNumber\": \"605FF03257\",\n            \"customerName\": \"SECURITY F\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"11112019\",\n            \"customerNumber\": \"683FP02292\",\n            \"customerName\": \"SPEEDYCASH\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"11062019\",\n            \"customerNumber\": \"484FA00732\",\n            \"customerName\": \"CAPONEAUTO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UZ\",\n            \"inquiryDate\": \"11042019\",\n            \"customerNumber\": \"990UZ84682\",\n            \"customerName\": \"DIRECTV\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"ON\",\n            \"inquiryDate\": \"11032019\",\n            \"customerNumber\": \"243ON00879\",\n            \"customerName\": \"CCB/BML\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"10262019\",\n            \"customerNumber\": \"605FP53528\",\n            \"customerName\": \"MIDWESTERN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"ON\",\n            \"inquiryDate\": \"08062019\",\n            \"customerNumber\": \"401ON02529\",\n            \"customerName\": \"FORTIVA\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UZ\",\n            \"inquiryDate\": \"07182019\",\n            \"customerNumber\": \"990UZ84682\",\n            \"customerName\": \"DIRECTV\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"06282019\",\n            \"customerNumber\": \"654FA11937\",\n            \"customerName\": \"CAC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AN\",\n            \"inquiryDate\": \"06282019\",\n            \"customerNumber\": \"605AN02079\",\n            \"customerName\": \"ANDERSFORD\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AU\",\n            \"inquiryDate\": \"06282019\",\n            \"customerNumber\": \"234AU05060\",\n            \"customerName\": \"5STRAUPLX\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AU\",\n            \"inquiryDate\": \"06282019\",\n            \"customerNumber\": \"605AU53915\",\n            \"customerName\": \"APPLE FIN\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AN\",\n            \"inquiryDate\": \"06282019\",\n            \"customerNumber\": \"481AN01052\",\n            \"customerName\": \"Z AUTO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AN\",\n            \"inquiryDate\": \"06282019\",\n            \"customerNumber\": \"622AN66752\",\n            \"customerName\": \"NEXCAR\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"UZ\",\n            \"inquiryDate\": \"06092019\",\n            \"customerNumber\": \"910UZ52954\",\n            \"customerName\": \"DISH NETWK\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FP\",\n            \"inquiryDate\": \"05072019\",\n            \"customerNumber\": \"495FP89705\",\n            \"customerName\": \"NATL AUTO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"05042019\",\n            \"customerNumber\": \"654FA11937\",\n            \"customerName\": \"CAC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FC\",\n            \"inquiryDate\": \"05042019\",\n            \"customerNumber\": \"605FC53014\",\n            \"customerName\": \"1STCOMMCU\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04282019\",\n            \"customerNumber\": \"401FA01342\",\n            \"customerName\": \"CARMAX\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04282019\",\n            \"customerNumber\": \"484FA00658\",\n            \"customerName\": \"CAP ONE AF\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04282019\",\n            \"customerNumber\": \"168FA28487\",\n            \"customerName\": \"ALLYFINANC\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"BB\",\n            \"inquiryDate\": \"04282019\",\n            \"customerNumber\": \"636BB51827\",\n            \"customerName\": \"53 BANK NA\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04282019\",\n            \"customerNumber\": \"180FA07400\",\n            \"customerName\": \"CARFINANCE\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04282019\",\n            \"customerNumber\": \"605FA52721\",\n            \"customerName\": \"FRSTINVST\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"FA\",\n            \"inquiryDate\": \"04212019\",\n            \"customerNumber\": \"484FA00732\",\n            \"customerName\": \"CAPONEAUTO\"\n          },\n          {\n            \"type\": \"inquiry\",\n            \"industryCode\": \"AU\",\n            \"inquiryDate\": \"04212019\",\n            \"customerNumber\": \"234AU03321\",\n            \"customerName\": \"ZAUTOPL\"\n          }\n        ],\n        \"models\": [\n          {\n            \"type\": \"00409\",\n            \"FICOScoreIndicatorCode\": {\n              \"code\": \"X\",\n              \"description\": \"FICO Bankcard Score 8 based on Equifax Data (F)\"\n            },\n            \"score\": \"409\",\n            \"reasons\": [\n              {\n                \"code\": \"00038\"\n              },\n              {\n                \"code\": \"00018\"\n              },\n              {\n                \"code\": \"00015\"\n              },\n              {\n                \"code\": \"00013\"\n              }\n            ],\n            \"inquiryKeyFactor\": {\n              \"code\": \"Y\",\n              \"description\": \"Yes - “NUMBER OF INQUIRIES ADVERSELY AFFECTED THE SCORE BUT NOT SIGNIFICANTLY” and inquiries were not already included in one of the top 4 reasons. If inquiries did not adversely affect the score (and were not in the top 4 reasons), a “blank” is returned. (Returned on FACTA versions models only.)\"\n            },\n            \"riskBasedPricingOrModel\": {\n              \"percentage\": \"001\",\n              \"lowRange\": \"250\",\n              \"highRange\": \"900\"\n            }\n          },\n          {\n            \"type\": \"MODEL\",\n            \"modelNumber\": \"02583\",\n            \"score\": 0,\n            \"modelIDOrScorecard\": \"1\",\n            \"scoreNumberOrMarketMaxIndustryCode\": {\n              \"code\": \"0\"\n            }\n          }\n        ],\n        \"identification\": {\n          \"subjectSocialNum\": \"666795307\",\n          \"socialNumConfirmed\": \"Y\",\n          \"socialMatchFlags\": \"YYYYYYYYY\",\n          \"inquirySocialNum\": \"666795307\",\n          \"inquirySocialNumStateIssued\": \"GA\",\n          \"inquirySocialNumYearIssued\": \"2011\",\n          \"socialNumMatch\": \"Y\"\n        },\n        \"attributes\": [\n          {\n            \"modelNumber\": \"02583\",\n            \"attributes\": [\n              {\n                \"identifier\": \"7000 = 04\"\n              },\n              {\n                \"identifier\": \"7001 = 0002\"\n              },\n              {\n                \"identifier\": \"8000 = 02\"\n              },\n              {\n                \"identifier\": \"7003 = 00\"\n              },\n              {\n                \"identifier\": \"8001 = 1\"\n              },\n              {\n                \"identifier\": \"6002 = 0\"\n              },\n              {\n                \"identifier\": \"5000 = 29\"\n              },\n              {\n                \"identifier\": \"5001 = 0002\"\n              },\n              {\n                \"identifier\": \"5002 = 33\"\n              },\n              {\n                \"identifier\": \"5003 = 97\"\n              },\n              {\n                \"identifier\": \"5004 = 97\"\n              },\n              {\n                \"identifier\": \"6003 = 0113\"\n              },\n              {\n                \"identifier\": \"6004 = 0002\"\n              },\n              {\n                \"identifier\": \"6005 = 06\"\n              },\n              {\n                \"identifier\": \"6006 = 10\"\n              },\n              {\n                \"identifier\": \"6007 = 13\"\n              },\n              {\n                \"identifier\": \"6008 = 15\"\n              },\n              {\n                \"identifier\": \"6009 = 20\"\n              },\n              {\n                \"identifier\": \"6010 = 14\"\n              },\n              {\n                \"identifier\": \"6011 = 0044861\"\n              },\n              {\n                \"identifier\": \"6012 = 0044043\"\n              },\n              {\n                \"identifier\": \"8002 = 0002\"\n              },\n              {\n                \"identifier\": \"6014 = 09\"\n              },\n              {\n                \"identifier\": \"6015 = 0030362\"\n              },\n              {\n                \"identifier\": \"6016 = 6\"\n              },\n              {\n                \"identifier\": \"6017 = 10\"\n              },\n              {\n                \"identifier\": \"6018 = 03\"\n              },\n              {\n                \"identifier\": \"6019 = 01\"\n              },\n              {\n                \"identifier\": \"6020 = 00\"\n              },\n              {\n                \"identifier\": \"6021 = 06\"\n              },\n              {\n                \"identifier\": \"6022 = 10\"\n              },\n              {\n                \"identifier\": \"6023 = 03\"\n              },\n              {\n                \"identifier\": \"6024 = 01\"\n              },\n              {\n                \"identifier\": \"6025 = 00\"\n              },\n              {\n                \"identifier\": \"6026 = 06\"\n              },\n              {\n                \"identifier\": \"6027 = 10\"\n              },\n              {\n                \"identifier\": \"6028 = 03\"\n              },\n              {\n                \"identifier\": \"6029 = 01\"\n              },\n              {\n                \"identifier\": \"6030 = 00\"\n              },\n              {\n                \"identifier\": \"6031 = 06\"\n              },\n              {\n                \"identifier\": \"6032 = 13\"\n              },\n              {\n                \"identifier\": \"6033 = 021\"\n              },\n              {\n                \"identifier\": \"6034 = 11\"\n              },\n              {\n                \"identifier\": \"6035 = 13\"\n              },\n              {\n                \"identifier\": \"6036 = 97\"\n              },\n              {\n                \"identifier\": \"6039 = 97\"\n              },\n              {\n                \"identifier\": \"6042 = 9999997\"\n              },\n              {\n                \"identifier\": \"6045 = 9999997\"\n              },\n              {\n                \"identifier\": \"6048 = 9997\"\n              },\n              {\n                \"identifier\": \"6051 = 9997\"\n              },\n              {\n                \"identifier\": \"6054 = 97\"\n              },\n              {\n                \"identifier\": \"6057 = 9999997\"\n              },\n              {\n                \"identifier\": \"6060 = 7\"\n              },\n              {\n                \"identifier\": \"6063 = 97\"\n              },\n              {\n                \"identifier\": \"6066 = 97\"\n              },\n              {\n                \"identifier\": \"6069 = 97\"\n              },\n              {\n                \"identifier\": \"6072 = 97\"\n              },\n              {\n                \"identifier\": \"6075 = 97\"\n              },\n              {\n                \"identifier\": \"6078 = 97\"\n              },\n              {\n                \"identifier\": \"6081 = 97\"\n              },\n              {\n                \"identifier\": \"6084 = 97\"\n              },\n              {\n                \"identifier\": \"6087 = 97\"\n              },\n              {\n                \"identifier\": \"6090 = 97\"\n              },\n              {\n                \"identifier\": \"6093 = 97\"\n              },\n              {\n                \"identifier\": \"6096 = 97\"\n              },\n              {\n                \"identifier\": \"6099 = 97\"\n              },\n              {\n                \"identifier\": \"6102 = 97\"\n              },\n              {\n                \"identifier\": \"6105 = 97\"\n              },\n              {\n                \"identifier\": \"6108 = 97\"\n              },\n              {\n                \"identifier\": \"6111 = 997\"\n              },\n              {\n                \"identifier\": \"6114 = 97\"\n              },\n              {\n                \"identifier\": \"6117 = 97\"\n              },\n              {\n                \"identifier\": \"6037 = 97\"\n              },\n              {\n                \"identifier\": \"6040 = 97\"\n              },\n              {\n                \"identifier\": \"6043 = 9999997\"\n              },\n              {\n                \"identifier\": \"6046 = 9999997\"\n              },\n              {\n                \"identifier\": \"6049 = 9997\"\n              },\n              {\n                \"identifier\": \"6052 = 9997\"\n              },\n              {\n                \"identifier\": \"6055 = 97\"\n              },\n              {\n                \"identifier\": \"6058 = 9999997\"\n              },\n              {\n                \"identifier\": \"6061 = 7\"\n              },\n              {\n                \"identifier\": \"6064 = 97\"\n              },\n              {\n                \"identifier\": \"6067 = 97\"\n              },\n              {\n                \"identifier\": \"6070 = 97\"\n              },\n              {\n                \"identifier\": \"6073 = 97\"\n              },\n              {\n                \"identifier\": \"6076 = 97\"\n              },\n              {\n                \"identifier\": \"6079 = 97\"\n              },\n              {\n                \"identifier\": \"6082 = 97\"\n              },\n              {\n                \"identifier\": \"6085 = 97\"\n              },\n              {\n                \"identifier\": \"6088 = 97\"\n              },\n              {\n                \"identifier\": \"6091 = 97\"\n              },\n              {\n                \"identifier\": \"6094 = 97\"\n              },\n              {\n                \"identifier\": \"6097 = 97\"\n              },\n              {\n                \"identifier\": \"6100 = 97\"\n              },\n              {\n                \"identifier\": \"6103 = 97\"\n              },\n              {\n                \"identifier\": \"6106 = 97\"\n              },\n              {\n                \"identifier\": \"6109 = 97\"\n              },\n              {\n                \"identifier\": \"6112 = 997\"\n              },\n              {\n                \"identifier\": \"6115 = 97\"\n              },\n              {\n                \"identifier\": \"6118 = 97\"\n              },\n              {\n                \"identifier\": \"6038 = 97\"\n              },\n              {\n                \"identifier\": \"6041 = 97\"\n              },\n              {\n                \"identifier\": \"6044 = 9999997\"\n              },\n              {\n                \"identifier\": \"6047 = 9999997\"\n              },\n              {\n                \"identifier\": \"6050 = 9997\"\n              },\n              {\n                \"identifier\": \"6053 = 9997\"\n              },\n              {\n                \"identifier\": \"6056 = 97\"\n              },\n              {\n                \"identifier\": \"6059 = 9999997\"\n              },\n              {\n                \"identifier\": \"6062 = 7\"\n              },\n              {\n                \"identifier\": \"6065 = 97\"\n              },\n              {\n                \"identifier\": \"6068 = 97\"\n              },\n              {\n                \"identifier\": \"6071 = 97\"\n              },\n              {\n                \"identifier\": \"6074 = 97\"\n              },\n              {\n                \"identifier\": \"6077 = 97\"\n              },\n              {\n                \"identifier\": \"6080 = 97\"\n              },\n              {\n                \"identifier\": \"6083 = 97\"\n              },\n              {\n                \"identifier\": \"6086 = 97\"\n              },\n              {\n                \"identifier\": \"6089 = 97\"\n              },\n              {\n                \"identifier\": \"6092 = 97\"\n              },\n              {\n                \"identifier\": \"6095 = 97\"\n              },\n              {\n                \"identifier\": \"6098 = 97\"\n              },\n              {\n                \"identifier\": \"6101 = 97\"\n              },\n              {\n                \"identifier\": \"6104 = 97\"\n              },\n              {\n                \"identifier\": \"6107 = 97\"\n              },\n              {\n                \"identifier\": \"6110 = 97\"\n              },\n              {\n                \"identifier\": \"6113 = 997\"\n              },\n              {\n                \"identifier\": \"6116 = 97\"\n              },\n              {\n                \"identifier\": \"6119 = 97\"\n              },\n              {\n                \"identifier\": \"6120 = 01\"\n              },\n              {\n                \"identifier\": \"6128 = 01\"\n              },\n              {\n                \"identifier\": \"6136 = 01\"\n              },\n              {\n                \"identifier\": \"6144 = 98\"\n              },\n              {\n                \"identifier\": \"6152 = 98\"\n              },\n              {\n                \"identifier\": \"6160 = 98\"\n              },\n              {\n                \"identifier\": \"6168 = 98\"\n              },\n              {\n                \"identifier\": \"6176 = 01\"\n              },\n              {\n                \"identifier\": \"6121 = 97\"\n              },\n              {\n                \"identifier\": \"6129 = 97\"\n              },\n              {\n                \"identifier\": \"6137 = 97\"\n              },\n              {\n                \"identifier\": \"6145 = 97\"\n              },\n              {\n                \"identifier\": \"6153 = 97\"\n              },\n              {\n                \"identifier\": \"6161 = 97\"\n              },\n              {\n                \"identifier\": \"6169 = 97\"\n              },\n              {\n                \"identifier\": \"6177 = 97\"\n              },\n              {\n                \"identifier\": \"6122 = 97\"\n              },\n              {\n                \"identifier\": \"6130 = 97\"\n              },\n              {\n                \"identifier\": \"6138 = 97\"\n              },\n              {\n                \"identifier\": \"6146 = 97\"\n              },\n              {\n                \"identifier\": \"6154 = 97\"\n              },\n              {\n                \"identifier\": \"6162 = 97\"\n              },\n              {\n                \"identifier\": \"6170 = 97\"\n              },\n              {\n                \"identifier\": \"6178 = 97\"\n              },\n              {\n                \"identifier\": \"6123 = 02\"\n              },\n              {\n                \"identifier\": \"6131 = 02\"\n              },\n              {\n                \"identifier\": \"6139 = 93\"\n              },\n              {\n                \"identifier\": \"6147 = 01\"\n              },\n              {\n                \"identifier\": \"6155 = 00\"\n              },\n              {\n                \"identifier\": \"6163 = 00\"\n              },\n              {\n                \"identifier\": \"6171 = 00\"\n              },\n              {\n                \"identifier\": \"6179 = 01\"\n              },\n              {\n                \"identifier\": \"6124 = 97\"\n              },\n              {\n                \"identifier\": \"6132 = 97\"\n              },\n              {\n                \"identifier\": \"6140 = 97\"\n              },\n              {\n                \"identifier\": \"6148 = 97\"\n              },\n              {\n                \"identifier\": \"6156 = 97\"\n              },\n              {\n                \"identifier\": \"6164 = 97\"\n              },\n              {\n                \"identifier\": \"6172 = 97\"\n              },\n              {\n                \"identifier\": \"6180 = 97\"\n              },\n              {\n                \"identifier\": \"6125 = 13\"\n              },\n              {\n                \"identifier\": \"6133 = 07\"\n              },\n              {\n                \"identifier\": \"6141 = 04\"\n              },\n              {\n                \"identifier\": \"6149 = 09\"\n              },\n              {\n                \"identifier\": \"6157 = 03\"\n              },\n              {\n                \"identifier\": \"6165 = 01\"\n              },\n              {\n                \"identifier\": \"6173 = 00\"\n              },\n              {\n                \"identifier\": \"6126 = 97\"\n              },\n              {\n                \"identifier\": \"6182 = 97\"\n              },\n              {\n                \"identifier\": \"6195 = 31\"\n              },\n              {\n                \"identifier\": \"6196 = 10186\"\n              },\n              {\n                \"identifier\": \"6197 = 99997\"\n              },\n              {\n                \"identifier\": \"6198 = 99997\"\n              },\n              {\n                \"identifier\": \"6199 = 99997\"\n              },\n              {\n                \"identifier\": \"6200 = 05000\"\n              },\n              {\n                \"identifier\": \"6201 = 99997\"\n              },\n              {\n                \"identifier\": \"6202 = 99997\"\n              },\n              {\n                \"identifier\": \"6203 = 99997\"\n              },\n              {\n                \"identifier\": \"6205 = 06\"\n              },\n              {\n                \"identifier\": \"6206 = 97\"\n              },\n              {\n                \"identifier\": \"6207 = 97\"\n              },\n              {\n                \"identifier\": \"6208 = 97\"\n              },\n              {\n                \"identifier\": \"7006 = 02\"\n              },\n              {\n                \"identifier\": \"8003 = 08\"\n              },\n              {\n                \"identifier\": \"6209 = 07\"\n              },\n              {\n                \"identifier\": \"6210 = 97\"\n              },\n              {\n                \"identifier\": \"6211 = 97\"\n              },\n              {\n                \"identifier\": \"6212 = 97\"\n              },\n              {\n                \"identifier\": \"6213 = 01\"\n              },\n              {\n                \"identifier\": \"6214 = 97\"\n              },\n              {\n                \"identifier\": \"6215 = 97\"\n              },\n              {\n                \"identifier\": \"6216 = 01\"\n              },\n              {\n                \"identifier\": \"6217 = 97\"\n              },\n              {\n                \"identifier\": \"6218 = 01\"\n              },\n              {\n                \"identifier\": \"6219 = 97\"\n              },\n              {\n                \"identifier\": \"6221 = 06\"\n              },\n              {\n                \"identifier\": \"6222 = 97\"\n              },\n              {\n                \"identifier\": \"6223 = 97\"\n              },\n              {\n                \"identifier\": \"6224 = 97\"\n              },\n              {\n                \"identifier\": \"6225 = 01\"\n              },\n              {\n                \"identifier\": \"6226 = 97\"\n              },\n              {\n                \"identifier\": \"6227 = 97\"\n              },\n              {\n                \"identifier\": \"6228 = 01\"\n              },\n              {\n                \"identifier\": \"6229 = 97\"\n              },\n              {\n                \"identifier\": \"6230 = 00\"\n              },\n              {\n                \"identifier\": \"6231 = 97\"\n              },\n              {\n                \"identifier\": \"6233 = 07000\"\n              },\n              {\n                \"identifier\": \"6234 = 99997\"\n              },\n              {\n                \"identifier\": \"6235 = 99997\"\n              },\n              {\n                \"identifier\": \"6236 = 99997\"\n              },\n              {\n                \"identifier\": \"6237 = 01\"\n              },\n              {\n                \"identifier\": \"6238 = 97\"\n              },\n              {\n                \"identifier\": \"6239 = 97\"\n              },\n              {\n                \"identifier\": \"6240 = 01\"\n              },\n              {\n                \"identifier\": \"6241 = 97\"\n              },\n              {\n                \"identifier\": \"6242 = 04\"\n              },\n              {\n                \"identifier\": \"6243 = 97\"\n              },\n              {\n                \"identifier\": \"8004 = 08\"\n              },\n              {\n                \"identifier\": \"8005 = 08\"\n              },\n              {\n                \"identifier\": \"6246 = 10\"\n              },\n              {\n                \"identifier\": \"6247 = 97\"\n              },\n              {\n                \"identifier\": \"6248 = 97\"\n              },\n              {\n                \"identifier\": \"6249 = 97\"\n              },\n              {\n                \"identifier\": \"8006 = 09\"\n              },\n              {\n                \"identifier\": \"8007 = 05\"\n              },\n              {\n                \"identifier\": \"3050 = 12\"\n              },\n              {\n                \"identifier\": \"6251 = 97\"\n              },\n              {\n                \"identifier\": \"6252 = 97\"\n              },\n              {\n                \"identifier\": \"6253 = 97\"\n              },\n              {\n                \"identifier\": \"6254 = 07\"\n              },\n              {\n                \"identifier\": \"6255 = 97\"\n              },\n              {\n                \"identifier\": \"6256 = 97\"\n              },\n              {\n                \"identifier\": \"6257 = 97\"\n              },\n              {\n                \"identifier\": \"5006 = 97\"\n              },\n              {\n                \"identifier\": \"5007 = 97\"\n              },\n              {\n                \"identifier\": \"6258 = 04\"\n              },\n              {\n                \"identifier\": \"6259 = 97\"\n              },\n              {\n                \"identifier\": \"6260 = 97\"\n              },\n              {\n                \"identifier\": \"6261 = 97\"\n              },\n              {\n                \"identifier\": \"6262 = 0000417\"\n              },\n              {\n                \"identifier\": \"6263 = 9999997\"\n              },\n              {\n                \"identifier\": \"6264 = 9999997\"\n              },\n              {\n                \"identifier\": \"6265 = 9999997\"\n              },\n              {\n                \"identifier\": \"6266 = 20\"\n              },\n              {\n                \"identifier\": \"6267 = 97\"\n              },\n              {\n                \"identifier\": \"6268 = 97\"\n              },\n              {\n                \"identifier\": \"6269 = 97\"\n              },\n              {\n                \"identifier\": \"6270 = 04\"\n              },\n              {\n                \"identifier\": \"6271 = 97\"\n              },\n              {\n                \"identifier\": \"6272 = 97\"\n              },\n              {\n                \"identifier\": \"6273 = 97\"\n              },\n              {\n                \"identifier\": \"6274 = 07\"\n              },\n              {\n                \"identifier\": \"6275 = 97\"\n              },\n              {\n                \"identifier\": \"6276 = 97\"\n              },\n              {\n                \"identifier\": \"6277 = 97\"\n              },\n              {\n                \"identifier\": \"6278 = 06\"\n              },\n              {\n                \"identifier\": \"6279 = 97\"\n              },\n              {\n                \"identifier\": \"6280 = 97\"\n              },\n              {\n                \"identifier\": \"6281 = 97\"\n              },\n              {\n                \"identifier\": \"6282 = 99997\"\n              },\n              {\n                \"identifier\": \"6283 = 99997\"\n              },\n              {\n                \"identifier\": \"6284 = 99997\"\n              },\n              {\n                \"identifier\": \"6285 = 00714\"\n              },\n              {\n                \"identifier\": \"6286 = 99997\"\n              },\n              {\n                \"identifier\": \"6287 = 99997\"\n              },\n              {\n                \"identifier\": \"6288 = 01429\"\n              },\n              {\n                \"identifier\": \"6289 = 99997\"\n              },\n              {\n                \"identifier\": \"6290 = 05000\"\n              },\n              {\n                \"identifier\": \"6291 = 99997\"\n              },\n              {\n                \"identifier\": \"6293 = 10714\"\n              },\n              {\n                \"identifier\": \"2022 = 20200909\"\n              },\n              {\n                \"identifier\": \"2023 = 03\"\n              },\n              {\n                \"identifier\": \"2024 = 201807\"\n              },\n              {\n                \"identifier\": \"2025 = 00\"\n              },\n              {\n                \"identifier\": \"2026 =\"\n              },\n              {\n                \"identifier\": \"2027 = 00\"\n              },\n              {\n                \"identifier\": \"2028 =\"\n              },\n              {\n                \"identifier\": \"2029 = 00\"\n              },\n              {\n                \"identifier\": \"2030 =\"\n              },\n              {\n                \"identifier\": \"2031 = 00\"\n              },\n              {\n                \"identifier\": \"2032 =\"\n              },\n              {\n                \"identifier\": \"2033 = 00\"\n              },\n              {\n                \"identifier\": \"2034 =\"\n              },\n              {\n                \"identifier\": \"2035 = 04\"\n              },\n              {\n                \"identifier\": \"2036 =\"\n              },\n              {\n                \"identifier\": \"2037 = 03\"\n              },\n              {\n                \"identifier\": \"2038 = 202007\"\n              },\n              {\n                \"identifier\": \"2039 = 01\"\n              },\n              {\n                \"identifier\": \"2040 = 202007\"\n              },\n              {\n                \"identifier\": \"2041 = 00\"\n              },\n              {\n                \"identifier\": \"2042 =\"\n              },\n              {\n                \"identifier\": \"2043 = 01\"\n              },\n              {\n                \"identifier\": \"2044 = 202007\"\n              },\n              {\n                \"identifier\": \"2049 = 01\"\n              },\n              {\n                \"identifier\": \"2050 = 202009\"\n              },\n              {\n                \"identifier\": \"6250 = 10\"\n              },\n              {\n                \"identifier\": \"6181 = 00\"\n              },\n              {\n                \"identifier\": \"8136 = 00001\"\n              },\n              {\n                \"identifier\": \"8137 = 00002\"\n              }\n            ]\n          }\n        ],\n        \"onlineGeoCode\": [\n          {\n            \"streetNumber\": \"7249\",\n            \"streetName\": \"PAJJ ZAFW\",\n            \"streetTypeOrDirection\": \"LN APT 12\",\n            \"city\": \"HUMBLE\",\n            \"stateAbbreviation\": \"TX\",\n            \"zipCode\": \"77396\",\n            \"typeOfAddress\": {\n              \"code\": \"CA\",\n              \"description\": \"Inq Current (the inquiry is about the current address)\"\n            },\n            \"returnCode1\": {\n              \"code\": \"1\",\n              \"description\": \"GEO info not found ZIP missing or zeros\"\n            },\n            \"returnCode2\": {\n              \"code\": \"0\",\n              \"description\": \"No match of block group\"\n            },\n            \"returnCode3\": {\n              \"code\": \"0\",\n              \"description\": \"No match of census track\"\n            },\n            \"returnCode4\": {\n              \"code\": \"0\",\n              \"description\": \"No match of enumeration district\"\n            }\n          }\n        ],\n        \"OFACAlerts\": [\n          {\n            \"revisedLegalVerbiageIndicator\": \"2\",\n            \"memberFirmCode\": \"OFAC\",\n            \"cdcTransactionDate\": \"09092020\",\n            \"cdcTransactionTime\": \"172550\",\n            \"transactionType\": \"O\",\n            \"cdcResponseCode\": \"N\",\n            \"legalVerbiage\": \"NO MATCH FOUND IN CDC'S OFAC DATABASE.\",\n            \"dataSegmentRegulated\": \"N\"\n          }\n        ],\n        \"consumerReferralLocation\": {\n          \"bureauCode\": \"300\",\n          \"bureauName\": \"EQUIFAX INFORMATION SERVICES LLC\",\n          \"address\": {\n            \"cityName\": \"ATLANTA\",\n            \"stateAbbreviation\": \"GA\",\n            \"zipCode\": \"303740241\"\n          },\n          \"telephoneNumber\": {\n            \"telephoneNumber\": \"8006851111\"\n          }\n        },\n        \"alternateDataSources\": {\n          \"militaryLendingCoveredBorrower\": {\n            \"regulatedIdentifier\": \"RG\",\n            \"disclaimer\": \"DISCLAIMER: THE DEPARTMENT OF DEFENSE (\\\"DOD\\\") COVERED BORROWER DATA (\\\"DATA\\\") IS FROM THE DEFENSE MANPOWER DATA CENTER (\\\"DMDC\\\") BY WAY OF CONTRACT BETWEEN EQUIFAX INFORMATION SERVICES LLC (\\\"EQUIFAX\\\") AND DOD. ALL DOD DATA IS USED AND STORED BY EQUIFAX IN ACCORDANCE WITH ITS LEGAL AND CONTRACTUAL OBLIGATIONS. THE DOD DATA IS NOT PART OF EQUIFAX'S NATIONWIDE CREDIT DATABASE, AND EQUIFAX IS REQUIRED TO MAINTAIN THE DOD DATA SEPARATE FROM AND NOT COMMINGLED WITH ANY CREDIT DATA MAINTAINED BY EQUIFAX.\",\n            \"coveredBorrowerStatus\": \"N\",\n            \"referralContactNumber\": \"888-279-8625\"\n          },\n          \"fraudIQSyntheticIDV2Alerts\": {\n            \"nonRegulatedIdentifier\": \"NR\",\n            \"hitNohitIndicator\": \"1\",\n            \"syntheticIdVer2\": \"{\\\"billingProdCode\\\":\\\"SYA\\\",\\\"flags\\\":{\\\"finalAssessment\\\":\\\"N\\\",\\\"assessmentLevel\\\":\\\"0\\\",\\\"auv\\\":\\\"N\\\",\\\"idDiscrepancy\\\":\\\"N\\\",\\\"activeAuthUsers\\\":\\\"0\\\",\\\"terminatedUsers\\\":\\\"0\\\",\\\"idcb\\\":\\\"N\\\",\\\"sharedSsn\\\":\\\"Y\\\",\\\"verifieSsn\\\":\\\"Y\\\",\\\"invalidSsn\\\":\\\"Y\\\",\\\"sharedAddress\\\":\\\"N\\\",\\\"identityConfirmation1\\\":\\\"N\\\",\\\"identityConfirmation2\\\":\\\"N\\\",\\\"inquiry\\\":\\\"N\\\",\\\"deathMasterHit\\\":\\\"N\\\"},\\\"disclaimer\\\":\\\"[SYNTHETIC ID ALERT] indicator is for identity fraud risk alert purposes only and is not to be used for determining the eligibility of an individual for any credit or any other FCRA permissible purpose. Client shall use the [SYNTHETIC ID ALERT] exclusively within their own organization for the purpose of identity fraud prevention. Accordingly, Client will not use an alert or warning message from the [SYNTHETIC ID ALERT] system in its decision-making process for denying credit, but will use the message as an indication that the identity and personally identifiable information of the consumer should be independently verified to form a reasonable belief that it knows the true identity of the consumer. Client understands that the information supplied by [SYNTHETIC ID ALERT] may or may not apply to the consumer who has applied to Client for credit, service, dealings, or other financial transactions. Client also understands and agrees that data from the [SYNTHETIC ID ALERT] system is proprietary to Equifax and shall not be used as a component of any database or file built or maintained by Client. The use of such data shall be limited to the specific transaction for which the [SYNTHETIC ID ALERT] message is provided. Equifax may, by written notice to Client, immediately terminate the agreement for service or suspend the [SYNTHETIC ID ALERT] service if Equifax has a reasonable belief that Client has violated the terms of this disclaimer or the agreement for service.\\\",\\\"transactionId\\\":\\\"ACROD8FA9413F2689FA2\\\",\\\"statusCode\\\":\\\"000\\\",\\\"statusMsg\\\":\\\"Success\\\"}\"\n          }\n        }\n      }\n    ]\n  },\n  \"links\": [\n    {\n      \"identifier\": \"Individual Report 1\",\n      \"type\": \"GET\",\n      \"href\": \"/business/consumer-credit/v1/reports/credit-report/676e3685-87d8-9a08-0404-0e497fce27a6\"\n    }\n  ]\n}";
            var rawData = await _creditScoreRepository.GetTestCreditScoreBySSN(Convert.ToInt64(request.SSN), request.CompanyId);
            var c = JsonConvert.DeserializeObject<EquifaxCreditReportResponse>(rawData);

            //c.Consumers.EquifaxUsConsumerCreditReport[0].Addresses = c.Consumers.EquifaxUsConsumerCreditReport[0].Addresses.Take(2).ToArray();

            string inquirySSN = creditReportRequestModel.Consumers.SocialNum[0].Number;

            c.Consumers.EquifaxUsConsumerCreditReport[0].BirthDate = creditReportRequestModel.Consumers.DateOfBirth;

            c.Consumers.EquifaxUsConsumerCreditReport[0].SubjectName.FirstName = creditReportRequestModel.Consumers.Name[0].FirstName;
            c.Consumers.EquifaxUsConsumerCreditReport[0].SubjectName.LastName = creditReportRequestModel.Consumers.Name[0].LastName;

            c.Consumers.EquifaxUsConsumerCreditReport[0].SubjectSocialNum = inquirySSN;

            c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum = inquirySSN;
            c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.InquirySocialNum = inquirySSN;

            // c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Score = Convert.ToInt64(inquirySSN.Substring(6, 3));

            c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Type = $"00{c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Score}";

            c.Consumers.EquifaxUsConsumerCreditReport[0].Trades = c.Consumers.EquifaxUsConsumerCreditReport[0].Trades.Take(1).ToArray();

            //string debt = inquirySSN.Substring(2, 4);

            //c.Consumers.EquifaxUsConsumerCreditReport[0].Trades[0].ScheduledPaymentAmount = Convert.ToInt64(debt);
            //c.Consumers.EquifaxUsConsumerCreditReport[0].Trades[0].Balance = Convert.ToInt64(debt);


            CreditScore creditScore = new CreditScore();
            List<Models.Trade> trades = new List<Models.Trade>();
            List<Models.Employment> employments = new List<Models.Employment>();

            if (c.Consumers.EquifaxUsConsumerCreditReport[0].Models == null)
            {
                creditScore.ApplicantScore = null;
            }
            else
            {
                if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification != null)
                {
                    if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.InquirySocialNum == c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum)
                    {
                        if (c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Score == null)
                        {
                            creditScore.ApplicantScore = null;
                        }
                        else
                        {
                            creditScore.ApplicantScore = c.Consumers.EquifaxUsConsumerCreditReport[0].Models[0].Score;
                        }
                    }
                    else
                    {
                        creditScore.ApplicantScore = -10;
                    }
                }
            }

            if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification != null)
            {
                if (c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.InquirySocialNum == c.Consumers.EquifaxUsConsumerCreditReport[0].Identification.SubjectSocialNum)
                {
                    creditScore.RawData = rawData;

                    if (c.Consumers.EquifaxUsConsumerCreditReport[0].Trades != null)
                    {
                        foreach (var item in c.Consumers.EquifaxUsConsumerCreditReport[0].Trades)
                        {
                            Models.Trade trade = new Models.Trade()
                            {
                                Source = "Equifax",
                                Include = true,
                                Category = "",
                                Creditor = item.CustomerName,
                                CreditorAccountNumber = item.AccountNumber,
                                CreditorCustomerNumber = item.CustomerNumber,
                                Joint = false,
                                Balance = Convert.ToDecimal(item.Balance),
                                Amount = Convert.ToDecimal(item.ScheduledPaymentAmount),
                                AdjAmount = Convert.ToDecimal(item.ActualPaymentAmount),
                                LastPaymentDate = null
                            };

                            if (!string.IsNullOrEmpty(item.DateOpened))
                            {
                                trade.DateOpened = DateTime.ParseExact(ConvertDate(item.DateOpened), "MMddyyyy", CultureInfo.InvariantCulture);
                            }

                            if (!string.IsNullOrEmpty(item.DateReported))
                            {
                                trade.DateReported = DateTime.ParseExact(ConvertDate(item.DateReported), "MMddyyyy", CultureInfo.InvariantCulture);
                            }

                            if (!string.IsNullOrEmpty(item.LastPaymentDate))
                            {
                                trade.LastPaymentDate = DateTime.ParseExact(ConvertDate(item.LastPaymentDate), "MMddyyyy", CultureInfo.InvariantCulture);
                            }

                            if (item.Rate == null)
                            {
                                trade.Rating = null;
                            }
                            else
                            {
                                trade.Rating = item.Rate.Code;
                            }

                            if (item.AccountDesignator != null)
                            {
                                trade.Joint = item.AccountDesignator.Code == "J" ? true : false;
                            }

                            if (item.PortfolioTypeCode != null)
                            {
                                trade.PortfolioType = item.PortfolioTypeCode.Description;
                            }

                            trades.Add(trade);
                        }
                    }

                    if (c.Consumers.EquifaxUsConsumerCreditReport[0].Employments != null)
                    {
                        foreach (var item in c.Consumers.EquifaxUsConsumerCreditReport[0].Employments)
                        {
                            Models.Employment employment = new Models.Employment()
                            {
                                Identifier = item.Identifier,
                                Employer = item.Employer,
                                Occupation = item.Occupation,
                                DateFirstReported = item.DateFirstReported,
                                DateLastReported = item.DateLastReported
                            };
                            employments.Add(employment);
                        }
                    }
                }
            }

            creditScore.Trades = trades.ToArray();
            creditScore.Employments = employments.ToArray();

            return creditScore;
        }

        private async Task<EquifaxFileStatusResponse> CheckEquifaxFileStatus(ApplicantRequestModel request)
        {
            try
            {
                var data = await AuthenticateEquifax(this.equifaxCredentials, "https://api.equifax.com/business/precheck/v1");

                HttpClientHandler handler = new HttpClientHandler()
                {
                    AutomaticDecompression = DecompressionMethods.GZip | DecompressionMethods.Deflate
                };

                var client = new HttpClient(handler);

                string fileStatusUrl = $"{equifaxCredentials.BaseUrl}business/precheck/v1/report-requests";

                client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", data.access_token);
                client.DefaultRequestHeaders.Connection.Add("keep-alive");
                //client.Timeout = TimeSpan.FromSeconds(60);

                var creditReportRequestModel = new EquifaxCreditReportRequest()
                {
                    Consumers = new Models.Equifax.CreditReport.Request.Consumers()
                    {
                        Name = new Name[]
                        {
                            new Name()
                            {
                                Identifier = request.Identifier,
                                FirstName = request.FirstName,
                                LastName = request.LastName
                            }
                        },
                        SocialNum = new SocialNumber[]
                        {
                            new SocialNumber()
                            {
                                Identifier = request.Identifier,
                                Number = request.SSN == null ? "" : request.SSN.Replace("-", "")
                            }
                        },
                        DateOfBirth = request.DOB == null ? "" : $"{request.DOB?.Month}{request.DOB?.Day}{request.DOB?.Year}",
                        Addresses = new Address[]
                        {
                        },
                        PhoneNumbers = new PhoneNumber[]
                        {
                        },
                        Employments = new Employments()
                        {
                        }
                    },
                    CustomerReferenceIdentifier = "JSON",
                    CustomerConfiguration = new CustomerConfiguration()
                    {
                        EquifaxUsConsumerCreditReport = new Models.Equifax.CreditReport.Request.EquifaxUsConsumerCreditReport()
                        {
                            MemberNumber = equifaxCredentials.MemberNumber,
                            SecurityCode = equifaxCredentials.SecurityCode,
                            MultipleReportIndicator = "F",
                            EcoaInquiryType = "Individual"
                        }
                    }
                };

                var payload = new StringContent(JsonConvert.SerializeObject(creditReportRequestModel));
                payload.Headers.ContentType = new MediaTypeWithQualityHeaderValue("application/json");
                var fileStatusResponse = await client.PostAsync(fileStatusUrl, payload);
                if (fileStatusResponse.IsSuccessStatusCode)
                {
                    string rawData = await fileStatusResponse.Content.ReadAsStringAsync();
                    var fileStatus = JsonConvert.DeserializeObject<EquifaxFileStatusResponse>(rawData);

                    return fileStatus;
                }
            }
            catch (Exception ex)
            {
                //TO DO 
                //Send a proper response
            }
            return null;
        }

        public async Task<string> PopulateJsonToText(string json)
        {
            var data = JsonConvert.DeserializeObject<EquifaxCreditReportResponse>(json);

            var root = data.Consumers.EquifaxUsConsumerCreditReport[0];

            string _text = string.Empty;
            _text = string.Concat(_text, "USER REF.BBFB32C8-B3A7-404E-A  THIS FORM PRODUCED BY EQUIFAX ", addNewLine(1));
            _text = string.Concat(_text, "*------------------------------------------------------------------------------", addNewLine(1));
            _text = string.Concat(_text, "\t", "COMPLIANCE DATA CENTER, INC.  ", addNewLine(2));
            if (root.OfacAlerts == null)
            {
                _text = string.Concat(_text, "\t", "*", "N/A", "*", addNewLine(1));
            }
            else
            {
                _text = string.Concat(_text, "\t", "*", root.OfacAlerts.Length == 0 ? "N/A" : root.OfacAlerts[0].LegalVerbiage, "*", addNewLine(1));
            }

            _text = string.Concat(_text, "\t", "END OF REPORT, COMPLIANCE DATA CENTER, INC.", addNewLine(1));
            _text = string.Concat(_text, "*------------------------------------------------------------------------------", addNewLine(1));
            _text = string.Concat(_text, "\t", "MILITARY LENDING COVERED BORROWER", addNewLine(2));
            _text = string.Concat(_text, "*", (root.AlternateDataSources.MilitaryLendingCoveredBorrower == null ? "N/A" : root.AlternateDataSources.MilitaryLendingCoveredBorrower.Disclaimer), "*", addNewLine(2));
            _text = string.Concat(_text, "COVERED BORROWER STATUS:", (root.AlternateDataSources.MilitaryLendingCoveredBorrower == null ? "N/A" : root.AlternateDataSources.MilitaryLendingCoveredBorrower.CoveredBorrowerStatus), addNewLine(1));
            _text = string.Concat(_text, "REFERRAL CONTACT NUMBER:", (root.AlternateDataSources.MilitaryLendingCoveredBorrower == null ? "N/A" : root.AlternateDataSources.MilitaryLendingCoveredBorrower.ReferralContactNumber), addNewLine(2));
            _text = string.Concat(_text, "*------------------------------------------------------------------------------", addNewLine(1));
            _text = string.Concat(_text, "** ADDRESS DISCREPANCY- ", root.AddressDiscrepancyIndicator == null ? "N/A" : (root.AddressDiscrepancyIndicator == "N" ? string.Concat("NO SUBSTANTIAL DIFFERENCE OCCURRED", addNewLine(6)) : ""));
            _text = string.Concat(_text, "*------------------------------------------------------------------------------", addNewLine(1));
            _text = string.Concat(_text, "FICO SCORE 5-EFX-N", addNewLine(1));

            if (root.Models == null)
            {

            }
            else
            {
                _text = string.Concat(_text, "\t\t", root.Models[0].Type == null ? "N/A" : root.Models[0].Score.ToString(), "\t", (root.Models[0].Reasons == null ? "N/A" : GetReasons(root.Models[0].Reasons.ToList())), addNewLine(1));
                _text = string.Concat(_text, "", root.Models[0].FicoScoreIndicatorCode == null ? "N/A" : root.Models[0].FicoScoreIndicatorCode.Description, addNewLine(1));
            }
            _text = string.Concat(_text, "*------------------------  IDENTIFICATION INFORMATION  ------------------------", addNewLine(1));
            _text = string.Concat(_text, "FILE SINCE:", GetDateFormat(root.FileSinceDate), "\tFAD:", GetDateFormat(root.LastActivityDate), "\tFN-153\tIN- ", addNewLine(2));

            if (root.SubjectName == null)
            {
            }
            else
            {
                _text = string.Concat(_text, "\t", "NAME:", "\t", root.SubjectName.FirstName, addNewLine(1));
                _text = string.Concat(_text, "\t", "     ", "\t", root.SubjectName.LastName, addNewLine(1));
            }
            if (root.Addresses == null)
            {
                _text = string.Concat(_text, "N/A", addNewLine(1));
            }
            else
            {
                _text = string.Concat(_text, GetAddress(root.Addresses.ToList()));
            }

            _text = string.Concat(_text, "FILE:SSN:", "\t", root.Identification == null ? "" : root.Identification.SubjectSocialNum);

            _text = string.Concat(_text, "\tBDS:", "\t", root.BirthDate == null ? "" : root.BirthDate);

            _text = string.Concat(_text, addNewLine(1));

            if (root.Identification == null)
            {

            }
            else
            {
                _text = string.Concat(_text, "INQ: SSN:", "\t", root.Identification.InquirySocialNum == null ? "" : root.Identification.InquirySocialNum);
                _text = string.Concat(_text, "\tSSN ISSUED:", "\t", root.Identification.InquirySocialNumYearIssued == null ? "" : root.Identification.InquirySocialNumYearIssued);
                _text = string.Concat(_text, "\tSTATE ISSUED:", "\t", root.Identification.InquirySocialNumStateIssued == null ? "" : root.Identification.InquirySocialNumStateIssued);
            }

            _text = string.Concat(_text, addNewLine(1));

            _text = string.Concat(_text, "*-----------------------------  REPORT SUMMERY  -------------------------------", addNewLine(2));
            _text = string.Concat(_text, " SUM-", GetDateFormat(root.FileSinceDate), "-", GetDateFormat(root.ReportDate), "\t PR-000 COLL-000 ACCTS-006 HC-$        0-$   175757 ", addNewLine(2));
            _text = string.Concat(_text, "*----------------------------  PAYMENT PRACTICE  ------------------------------", addNewLine(2));
            if (root.Trades == null)
            {
                _text = string.Concat(_text, "N/A", addNewLine(1));
            }
            else
            {
                _text = string.Concat(_text, GetPaymentHistory(root.Trades.ToList()));
            }
            _text = string.Concat(_text, "*--------------------------  INQUIRY INFORMATION  -----------------------------", addNewLine(2));
            if (root.Inquiries == null)
            {
                _text = string.Concat(_text, "N/A", addNewLine(1));
            }
            else
            {
                _text = string.Concat(_text, GetInqueries(root.Inquiries.ToList()));
            }
            _text = string.Concat(_text, "END OF REPORT EQUIFAX AND AFFILIATES - ", DateTime.Now.ToShortDateString().Replace("-", "/"), addNewLine(2));

            return _text.ToString();
        }

        private string addNewLine(int count)
        {
            string _newLine = string.Empty;
            for (int _count = 0; _count < count; _count++)
            {
                _newLine = string.Concat(_newLine + Environment.NewLine);
            }
            return _newLine;
        }

        private string Organize(string data, int count)
        {
            var _result = string.Empty;

            var _dataLength = data != null ? data.Length : 0;
            var _count = count;
            var _space = _count - _dataLength;

            for (int i = 0; i < _space; i++)
            {
                _result += " ";
            }
            _result = string.Concat(data, _result);
            return _result;
        }
        private string OrganizePayment(string data, int count)
        {
            var _result = string.Empty;

            var _dataLength = data.Length;
            var _count = count;
            var _space = _count - _dataLength;

            for (int i = 0; i < _space; i++)
            {
                _result += "0";
            }
            _result = string.Concat(_result, data);
            return _result;
        }
        private string GetAddress(List<AddressElement> list)
        {
            var _result = string.Empty;
            foreach (var address in list)
            {
                _result = string.Concat(_result, "\t", address.AddressType == "current" ? "Address" : "former", ": ", address.AddressLine1, "\t\t\t", "VER:", addNewLine(1));
                _result = string.Concat(_result, "\t\t ", address.CityName, ", ", address.StateAbbreviation, " ", address.ZipCode, addNewLine(1));
                _result = string.Concat(_result, "\t\t FIRST RPTD:", GetDateFormat(address.DateFirstReported), "  LAST RPTD:", GetDateFormat(address.DateLastReported), "  SOURCE:", address.SourceOfAddress == null ? "N/A" : address.SourceOfAddress.Description, addNewLine(1));
                _result = string.Concat(_result, "\t\t TELEPHONE: \t\t RPTD: \t\t STD:", addNewLine(1));
            }
            return _result;
        }

        private string GetInqueries(List<Inquiry> inquiry)
        {
            var _result = string.Empty;
            foreach (var item in inquiry)
            {
                _result = string.Concat(_result, GetDateFormat(item.InquiryDate), " ", item.IndustryCode, "\t", item.CustomerNumber, " ", item.CustomerName, addNewLine(1));
            }
            return _result;
        }

        private string GetPaymentHistory(List<Models.Equifax.CreditReport.Response.Trade> list)
        {
            var _result = string.Empty;
            _result = string.Concat(_result, " REPORTED  !   BALANCE! DFD/DLA  !DURATION  !   DEFER  !MR/ECOA   !MAJ DEL", addNewLine(1));
            _result = string.Concat(_result, " OPENED    ! HIGH CRDT! LAST PYMT!FREQUENCY !   BALLOON!PAST DUE  !CLASS ", addNewLine(1));
            _result = string.Concat(_result, " CLOSED    !CRDT LIMIT!  ACT PYMT!SCH PYMT  !   BALLOON!CHARGE OFF!ACTIVITY DES", addNewLine(2));

            foreach (var item in list)
            {
                var _frequencyCode = string.Empty;
                if (item.TermsFrequencyCode != null)
                {
                    _frequencyCode = item.TermsFrequencyCode.Code;
                }
                _result = string.Concat(_result, " ", item.CustomerName, ", ", (item.AccountTypeCode == null ? "" : item.AccountTypeCode.Description), "/", item.AccountNumber, item.AutomatedUpdateIndicator, _frequencyCode, "\t", "#-", item.CustomerNumber, addNewLine(1));
                _result = string.Concat(_result, " ", "\t\t\t", (item.AccountTypeCode == null ? "" : item.AccountTypeCode.Description), addNewLine(1));
                _result = string.Concat(_result, " ", "PYMT HST-", addNewLine(1));

                var _mr = item.MonthsReviewed != null ? item.MonthsReviewed + "/" : "";
                var _duration = item.TermsDurationCode != null ? item.TermsDurationCode.Code : "";
                var _ecoa = item.AccountDesignator != null ? item.AccountDesignator.Description : "";
                if (!string.IsNullOrEmpty(_ecoa))
                {
                    var accountType = _ecoa.Split(' ');
                    _ecoa = accountType[0].Length > 6 ? accountType[0].Substring(0, 7).ToUpper() : accountType[0].ToUpper();
                }
                //-----------------Reported
                _result = string.Concat(_result, " ", Organize(GetDateFormat(item.DateReported), 10), "!$", OrganizePayment(item.Balance.ToString(), 9), "!", Organize(GetDateFormat(item.LastPaymentDate) ?? "", 10), "!", Organize(_duration, 10), "!", Organize(string.Empty, 10), "!", Organize(string.Concat(_mr, _ecoa), 10), "!", Organize(string.Empty, 10), addNewLine(1));

                var _frequency = item.TermsDurationCode != null ? item.TermsDurationCode.Description : "";

                //-----------------Opened
                _result = string.Concat(_result, " ", Organize(GetDateFormat(item.DateOpened), 10), "!$", OrganizePayment(item.HighCredit.ToString(), 9), "!", Organize(GetDateFormat(item.LastPaymentDate) ?? "", 10), "!", Organize(_frequency, 10), "!", Organize(string.Empty, 10), "!$", OrganizePayment(item.PastDueAmount.ToString(), 9), "!", Organize(string.Empty, 10), addNewLine(1));

                var _closedDate = string.IsNullOrEmpty(item.ClosedDate) == false ? GetDateFormat(item.ClosedDate) : "";
                var _activityDesignatorCode = string.Empty;
                if (item.ActivityDesignatorCode != null)
                {
                    _activityDesignatorCode = item.ActivityDesignatorCode.Description;
                }

                //-----------------Closed
                _result = string.Concat(_result, " ", Organize(_closedDate, 10), "!$", OrganizePayment(string.Empty, 9), "!$", OrganizePayment(string.Empty, 9), "!$", OrganizePayment(item.ScheduledPaymentAmount.ToString(), 9), "!", Organize(string.Empty, 10), "!$", OrganizePayment(item.OriginalChargeOffAmount.ToString(), 9), "!", Organize(_activityDesignatorCode, 10), addNewLine(1));
                if (item.NarrativeCodes == null)
                {
                    _result = string.Concat(_result, " ", "N/A", addNewLine(1));
                }
                else
                {
                    foreach (var child in item.NarrativeCodes)
                    {
                        _result = string.Concat(_result, " ", child.Description, addNewLine(1));
                    }
                }

                _result = string.Concat(_result, addNewLine(1));
            }
            return _result;
        }

        private string GetReasons(List<ScoreNumberOrMarketMaxIndustryCode> _list)
        {
            List<string> _values = new List<string>();
            foreach (var item in _list)
            {
                _values.Add(item.Code);
            }
            var _result = string.Join("/", _values);
            return _result;
        }
        private string GetDateFormat(string date)
        {
            var _result = date;
            if (!string.IsNullOrEmpty(_result))
                _result = string.Concat(_result.Substring(0, 2), "/", _result.Substring(2, 2), "/", _result.Substring(4, 4));
            return _result;
        }

        private string ConvertDate(string date)
        {
            String month = date.Substring(0, 2);
            String day = date.Substring(2, 2);
            String year = date.Substring(4, 4);

            if (day.Equals("00"))
            {
                day = "01";
            }
            if (month.Equals("00"))
            {
                month = "01";
            }

            return $"{month}{day}{year}";
        }
    }

    public class EquifaxCredentials
    {
        public string BaseUrl { get; set; }
        public string Username { get; set; }
        public string Password { get; set; }
        public string MemberNumber { get; set; }
        public string SecurityCode { get; set; }
    }
}
