{"version":3,"sources":["./src/app/views/emailsettings/emailsettings.component.html","./src/app/views/emailsettings/emailsettings-routing.module.ts","./src/app/views/emailsettings/emailsettings.component.ts","./src/app/views/emailsettings/emailsettings.module.ts","./src/app/views/emailsettings/emailsettings.service.ts"],"names":[],"mappings":"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","file":"views-emailsettings-emailsettings-module.js","sourcesContent":["export default \"<div class=\\\"page\\\">\\r\\n  <div class=\\\"breadcrumb-holder\\\">\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12 mt-3\\\">\\r\\n          <span class=\\\"dash\\\">Email Settings</span>\\r\\n          <ul class=\\\"breadcrumb\\\">\\r\\n            <li class=\\\"breadcrumb-item\\\"><a routerLink=\\\"/dashboard\\\">Dashboard</a></li>\\r\\n            <li class=\\\"breadcrumb-item\\\">Email Settings</li>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n  <section class=\\\"dashboard-header section-padding\\\">\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <div class=\\\"row d-flex align-items-md-stretch\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <div class=\\\"bg-white border rounded pb-4\\\">\\r\\n            <div class=\\\"col-md-12 mt-4\\\" [ngClass]=\\\"{'disabled':loadSave}\\\">\\r\\n              <form [formGroup]=\\\"emailSettingForm\\\" autocomplete=\\\"off\\\">\\r\\n                <div class=\\\"emailSettings-box\\\" [ngClass]=\\\"{'disabled':loadSave}\\\">\\r\\n                  <div class=\\\"row\\\">\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>SMTP Host:<span class=\\\"text-danger\\\">*</span></label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter SMTP Server.\\\"\\r\\n                               formControlName=\\\"smtpServer\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (smtpServer.invalid && (smtpServer.dirty || smtpServer.touched) && (smtpServer.errors?.required || smtpServer.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"smtpServer.invalid && (smtpServer.dirty || smtpServer.touched) && smtpServer.errors?.required\\\"\\r\\n                               style=\\\"color:red;\\\">SMTP Host is required</small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>SMTP Username:<span class=\\\"text-danger\\\">*</span></label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter SMTP Username\\\"\\r\\n                               formControlName=\\\"smtpUserName\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (smtpUserName.invalid && (smtpUserName.dirty || smtpUserName.touched) && (smtpUserName.errors?.required || smtpUserName.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"smtpUserName.invalid && (smtpUserName.dirty || smtpUserName.touched) && smtpUserName.errors?.required\\\"\\r\\n                               class=\\\"text-danger\\\">SMTP Username is required</small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>SMTP Password:<span class=\\\"text-danger\\\">*</span></label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Enter SMTP Password\\\" passwordToggle\\r\\n                               formControlName=\\\"smtpPassword\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (smtpPassword.invalid && (smtpPassword.dirty || smtpPassword.touched) && (smtpPassword.errors?.required || smtpPassword.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"smtpPassword.invalid && (smtpPassword.dirty || smtpPassword.touched) && smtpPassword.errors?.required\\\"\\r\\n                               class=\\\"text-danger\\\">SMTP Password is required</small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>SMTP Port:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter SMTP Port\\\"\\r\\n                               formControlName=\\\"smtpPort\\\" />\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>From Email:<span class=\\\"text-danger\\\">*</span></label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter From email\\\"\\r\\n                               formControlName=\\\"fromEmailId\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (fromEmailId.invalid && (fromEmailId.dirty || fromEmailId.touched) && (fromEmailId.errors?.required || fromEmailId.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"fromEmailId.invalid && (fromEmailId.dirty || fromEmailId.touched) && fromEmailId.errors?.required\\\"\\r\\n                               class=\\\"text-danger\\\">From email is required</small>\\r\\n                        <small *ngIf=\\\"fromEmailId.invalid && (fromEmailId.dirty || fromEmailId.touched) && fromEmailId.errors?.email\\\"\\r\\n                               class=\\\"text-danger\\\">Please enter valid email address</small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                  </div>\\r\\n                </div>\\r\\n\\r\\n              </form>\\r\\n              <div class=\\\"col-12 p-0\\\">\\r\\n                <a href=\\\"javascript:void(0);\\\" class=\\\"btn btn-primary form-btns\\\" (click)=\\\"saveEmailSetting()\\\" *ngIf=\\\"addOrUpdatePermission\\\"><i class=\\\"fa fa-save\\\"></i> Submit</a>\\r\\n              </div>\\r\\n            </div>\\r\\n\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </section>\\r\\n  <app-loader [size]=60 [color]=\\\"'white'\\\" *ngIf=\\\"loadSave\\\" class=\\\"loader\\\"></app-loader>\\r\\n</div>\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { EmailsettingsComponent } from './emailsettings.component';\r\n\nconst routes: Routes = [\n  { path: '', component: EmailsettingsComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class EmailsettingsRoutingModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { EmailsettingsService, EmailSettings } from './emailsettings.service';\nimport { ReactiveFormsModule, FormBuilder, Validators } from '@angular/forms';\nimport { ToastrService } from 'ngx-toastr';\nimport { CommonService, ModuleList } from '../shared/common.service';\nimport { ActivatedRoute } from '@angular/router';\n@Component({\n  selector: 'app-emailsettings',\n  templateUrl: './emailsettings.component.html',\n  styles: []\n})\nexport class EmailsettingsComponent implements OnInit {\n  loadSave = false;\n  modulePermission: ModuleList;\n  addOrUpdatePermission: boolean;\n\n  constructor(private emailSettingService: EmailsettingsService\n    , private fb: FormBuilder\n    , private toaster: ToastrService\n    , private commonService: CommonService, private route: ActivatedRoute) {\n    const moduleCode = this.route.snapshot.data.moduleCode;\n    this.modulePermission = this.commonService.getPermission(moduleCode);\n  }\n\n  ngOnInit() {\n    this.loadSave = true;\n    this.addOrUpdatePermission = this.modulePermission.roleModuleAddFlag;\n    this.getEmailSettings();\n   \n  }\n  emailSettingForm = this.fb.group({\n    emailSettingId: [null],\n    smtpServer: ['', Validators.required],\n    smtpUserName: ['', Validators.required],\n    smtpPassword: ['', Validators.required],\n    smtpPort: [''],\n    fromEmailId: ['', [Validators.required, Validators.email]],\n  });\n\n  getEmailSettings() {\n    this.addOrUpdatePermission = this.modulePermission.roleModuleUpdateFlag;\n    this.emailSettingService.getEmailSettings().subscribe((res: any) => {\n      if (res) {\n        this.loadSave = false;\n        this.displayForm(res);\n      }\n      else {\n        this.toaster.error(\"Something went wrong. Please contact site administrator.\");\n      }\n    },\n      (error: any) => {\n        this.loadSave = false;\n      })\n  }\n\n  displayForm(emailSettingModel: EmailSettings) {\n    if (emailSettingModel) {\n      this.emailSettingForm.patchValue({\n        emailSettingId: emailSettingModel.emailSettingId,\n        smtpServer: emailSettingModel.smtpServer,\n        smtpUserName: emailSettingModel.smtpUserName,\n        smtpPassword: emailSettingModel.smtpPassword,\n        smtpPort: emailSettingModel.smtpPort,\n        fromEmailId: emailSettingModel.fromEmailId\n      });\n    }\n  }\n\n  saveEmailSetting() {\n    if (this.emailSettingForm.valid) {\n      this.loadSave = true;\n      this.emailSettingService.saveEmailSettings(this.emailSettingForm.value).subscribe(\n        res => {\n          if (res) {\n            this.toaster.success(\"Email Setting has been updated successfully.\");\n            this.getEmailSettings();\n           this.loadSave = false;\n          }\n          else\n            this.toaster.error(\"Something went wrong. Please contact site administrator.\");\n        },\n        err => {\n          this.toaster.error(\"Something went wrong. Please contact site administrator.\");\n          this.loadSave = false;\n        }\n      );\n    }\n    else {\n      this.commonService.validateAllFormFields(this.emailSettingForm);\n    }\n  }\n  get emailSettingId() { return this.emailSettingForm.get('emailSettingId'); }\n  get smtpServer() { return this.emailSettingForm.get('smtpServer'); }\n  get smtpUserName() { return this.emailSettingForm.get('smtpUserName'); }\n  get smtpPassword() { return this.emailSettingForm.get('smtpPassword'); }\n  get smtpPort() { return this.emailSettingForm.get('smtpPort'); }\n  get fromEmailId() { return this.emailSettingForm.get('fromEmailId'); }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { EmailsettingsRoutingModule } from './emailsettings-routing.module';\nimport { EmailsettingsComponent } from './emailsettings.component';\r\nimport { EmailsettingsService } from './emailsettings.service';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\n@NgModule({\n  declarations: [EmailsettingsComponent],\n  imports: [\n    CommonModule,\n    EmailsettingsRoutingModule,\n    SharedModule,\n    ReactiveFormsModule\n  ],\n  providers: [EmailsettingsService]\n})\nexport class EmailsettingsModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from 'src/environments/environment';\n@Injectable({\n  providedIn: 'root'\n})\nexport class EmailsettingsService {\n  public baseUri = `${environment.WebApiBaseUrl}`;\n  constructor(private http: HttpClient) { }\n\n  getEmailSettings() {\n    return this.http.get(this.baseUri + `EmailSettings/GetEmailSettings`);\n  }\n\n  saveEmailSettings(emailSettingModel: any) {\n    return this.http.post(this.baseUri + `EmailSettings/SaveEmailSettings`, emailSettingModel);\n  }\n}\n\nexport class EmailSettings {\n  emailSettingId: any;\n  smtpServer: string;\n  smtpPort: string;\n  smtpUserName: string;\n  smtpPassword: string;\n  fromEmailId: string;\n  constructor() {\n    this.emailSettingId = null;\n    this.smtpServer = \"\";\n    this.smtpPort = \"\";\n    this.smtpUserName = \"\";\n    this.smtpPassword = \"\";\n    this.fromEmailId = \"\";\n  }\n}\n"],"sourceRoot":"webpack:///"}