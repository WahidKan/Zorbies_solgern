{"version":3,"sources":["./src/app/views/bank-information/bank-information.component.html","./src/app/views/bank-information/bank-information-routing.module.ts","./src/app/views/bank-information/bank-information.component.scss","./src/app/views/bank-information/bank-information.component.ts","./src/app/views/bank-information/bank-information.module.ts","./src/app/views/bank-information/bank-information.service.ts"],"names":[],"mappings":"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","file":"views-bank-information-bank-information-module.js","sourcesContent":["export default \"<div class=\\\"page\\\">\\r\\n  <div class=\\\"breadcrumb-holder\\\">\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-lg-12 mt-3\\\">\\r\\n          <span class=\\\"dash\\\">Manage Bank Information</span>\\r\\n          <ul class=\\\"breadcrumb\\\">\\r\\n            <li class=\\\"breadcrumb-item\\\"><a routerLink=\\\"/dashboard\\\">Dashboard</a></li>\\r\\n            <li class=\\\"breadcrumb-item active\\\">Manage Bank Information</li>\\r\\n          </ul>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <section class=\\\"dashboard-header section-padding\\\">\\r\\n    <div class=\\\"container-fluid\\\">\\r\\n      <div class=\\\"row d-flex align-items-md-stretch\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n          <div class=\\\"bg-white border rounded pb-4\\\">\\r\\n            <div class=\\\"col-md-12 mt-4\\\">\\r\\n              <form [formGroup]=\\\"addbankForm\\\" autocomplete=\\\"off\\\">\\r\\n                <div [ngClass]=\\\"{'disabled':loadSave}\\\">\\r\\n                  <div class=\\\"row\\\">\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-12 col-lg-12\\\">\\r\\n                      <label class=\\\"m-label-s\\\">Bank Information:</label>\\r\\n                      <hr size=\\\"4\\\" class=\\\"mt-0 border-secondary\\\">\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>Bank Name:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactBankName\\\" maxlength=\\\"100\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (contactBankName.invalid && (contactBankName.dirty || contactBankName.touched) && (contactBankName.errors?.required || contactBankName.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"addbankForm.get('contactBankName').touched && addbankForm.get('contactBankName').errors?.required\\\" class=\\\"text-danger\\\">\\r\\n                          Bank Name is required\\r\\n                        </small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>Bank Address:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactBankAddress\\\" maxlength=\\\"500\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (contactBankAddress.invalid && (contactBankAddress.dirty || contactBankAddress.touched) && (contactBankAddress.errors?.required || contactBankAddress.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"addbankForm.get('contactBankAddress').touched && addbankForm.get('contactBankAddress').errors?.required\\\" class=\\\"text-danger\\\">\\r\\n                          Bank Address is required\\r\\n                        </small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>City:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter City\\\" formControlName=\\\"contactBankCity\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (contactBankCity.invalid && (contactBankCity.dirty || contactBankCity.touched) && (contactBankCity.errors?.required || contactBankCity.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"contactBankCity.invalid && (contactBankCity.dirty || contactBankCity.touched) && contactBankCity.errors?.required\\\"\\r\\n                               class=\\\"text-danger\\\">City is required</small>\\r\\n                        <small *ngIf=\\\"contactBankCity.invalid && (contactBankCity.dirty || contactBankCity.touched) && contactBankCity.errors?.maxlength\\\"\\r\\n                               class=\\\"text-danger\\\">City name must be less than 100 characters.</small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>County:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter County\\\"\\r\\n                               formControlName=\\\"contactBankCounty\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (contactBankCounty.invalid && (contactBankCounty.dirty || contactBankCounty.touched) && (contactBankCounty.errors?.required || contactBankCounty.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"contactBankCounty.invalid && (contactBankCounty.dirty || contactBankCounty.touched) && contactBankCounty.errors?.required\\\"\\r\\n                               class=\\\"text-danger\\\">County is required</small>\\r\\n                        <small *ngIf=\\\"contactBankCounty.invalid && (contactBankCounty.dirty || contactBankCounty.touched) && contactBankCounty.errors?.maxlength\\\"\\r\\n                               class=\\\"text-danger\\\">County must be less than 100 characters.</small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>State:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                       \\r\\n                        <ng-select [items]=\\\"lstStates\\\"\\r\\n                                   placeholder=\\\"Select State\\\" bindValue=\\\"value\\\" bindLabel=\\\"text\\\" formControlName=\\\"contactBankState\\\"\\r\\n                                   [ngClass]=\\\"{'is-invalid': (contactBankState.invalid && (contactBankState.dirty || contactBankState.touched) && (contactBankState.errors?.required || contactBankState.errors?.maxlength)) }\\\">\\r\\n                        </ng-select>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>Zip Code:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter Zip Code\\\" formControlName=\\\"contactBankZipcode\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (contactBankZipcode.invalid && (contactBankZipcode.dirty || contactBankZipcode.touched) && (contactBankZipcode.errors?.required || contactBankZipcode.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"contactBankZipcode.invalid && (contactBankZipcode.dirty || contactBankZipcode.touched) && contactBankZipcode.errors?.required\\\"\\r\\n                               class=\\\"text-danger\\\">Zip Code is required</small>\\r\\n                        <small *ngIf=\\\"contactBankZipcode.invalid && (contactBankZipcode.dirty || contactBankZipcode.touched) && contactBankZipcode.errors?.maxlength\\\"\\r\\n                               class=\\\"text-danger\\\">Zip Code can not be greater than 5 characters.</small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>Bank Routing Number:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactBankRoutingNumber\\\" maxlength=\\\"100\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (contactBankRoutingNumber.invalid && (contactBankRoutingNumber.dirty || contactBankRoutingNumber.touched) && (contactBankRoutingNumber.errors?.required || contactBankRoutingNumber.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"addbankForm.get('contactBankRoutingNumber').touched && addbankForm.get('contactBankRoutingNumber').errors?.required\\\" class=\\\"text-danger\\\">\\r\\n                          Bank Routing Number is required\\r\\n                        </small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                    <div class=\\\"col-12 col-md-6 col-lg-4\\\">\\r\\n                      <label>Bank Account Number:</label>\\r\\n                      <div class=\\\"form-group\\\">\\r\\n                        <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"contactBankAccountNum\\\" maxlength=\\\"100\\\"\\r\\n                               [ngClass]=\\\"{'is-invalid': (contactBankAccountNum.invalid && (contactBankAccountNum.dirty || contactBankAccountNum.touched) && (contactBankAccountNum.errors?.required || contactBankAccountNum.errors?.maxlength)) }\\\">\\r\\n                        <small *ngIf=\\\"addbankForm.get('contactBankAccountNum').touched && addbankForm.get('contactBankAccountNum').errors?.required\\\" class=\\\"text-danger\\\">\\r\\n                          Bank Account Number is required\\r\\n                        </small>\\r\\n                      </div>\\r\\n                    </div>\\r\\n\\r\\n                  </div>\\r\\n\\r\\n                </div>\\r\\n              </form>\\r\\n              <div class=\\\"col-12 p-0\\\">\\r\\n                <a href=\\\"javascript:void(0);\\\" class=\\\"btn btn-primary form-btns\\\" (click)=\\\"save()\\\"><i class=\\\"fa fa-save\\\"></i> Submit</a>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n  </section>\\r\\n  <app-loader [size]=60 [color]=\\\"'white'\\\" *ngIf=\\\"loadSave\\\" class=\\\"loader\\\"></app-loader>\\r\\n</div>\\r\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { BankInformationComponent } from './bank-information.component';\r\n\nconst routes: Routes = [\n  { path: '', component: BankInformationComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BankInformationRoutingModule { }\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3ZpZXdzL2JhbmstaW5mb3JtYXRpb24vYmFuay1pbmZvcm1hdGlvbi5jb21wb25lbnQuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder } from '@angular/forms';\nimport { ModuleList, CommonService } from '../shared/common.service';\nimport { BankInformationService } from './bank-information.service';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'app-bank-information',\n  templateUrl: './bank-information.component.html',\n  styleUrls: ['./bank-information.component.scss']\n})\nexport class BankInformationComponent implements OnInit {\n\n  addbankForm: FormGroup;\n  loadSave = false;\n  UserId: any;\n  addOrUpdatePermission: boolean;\n  modulePermission: ModuleList;\n  states: any;\n  lstStates: any;\n  constructor(private fb: FormBuilder, private commonService: CommonService,\n    private addInsurance: BankInformationService, private toaster: ToastrService) {\n    this.loadStateDropdown();\n  }\n\n  ngOnInit() {\n    this.commonService.getLoggedInName.subscribe((userdetail: any) => {\n      this.UserId = userdetail.id;\n      this.getBankInformation(this.UserId);\n    });\n    this.initForm();\n  }\n  \n  private initForm() {\n    this.addbankForm = this.fb.group({\n      contactBankId: [null],\n      contactBankName: [''],\n      contactBankAddress: [''],\n      contactBankRoutingNumber: [''],\n      contactBankAccountNum: [''],\n      contactBankCity: [''],\n      contactBankCounty: [''],\n      contactBankState: [null],\n      contactBankZipcode:['']\n\n    });\n  }\n\n  getBankInformation(userId: string) {\n    this.addInsurance.getBankInformation(userId)\n      .subscribe((response) => {\n        this.loadSave = true;\n        this.displayBankInformation(response);\n        this.loadSave = false;\n      },\n        (error: any) => {\n          this.loadSave = false;\n        });\n  }\n\n  displayBankInformation(response): void {\n    \n    this.addbankForm.patchValue({\n      contactBankId: response.contactBankId,\n      contactBankName: response.contactBankName,\n      contactBankAddress: response.contactBankAddress,\n      contactBankRoutingNumber: response.contactBankRoutingNumber,\n      contactBankAccountNum: response.contactBankAccountNum,\n\n      contactBankZipcode: response.contactBankZipcode,\n      contactBankCity: response.contactBankCity,\n      contactBankCounty: response.contactBankCounty,\n      contactBankState: response.contactBankState,\n    });\n  }\n  loadStateDropdown() {\n    this.commonService.getStatesList().subscribe(res => {\n      this.lstStates = this.commonService.states;\n    });\n  }\n  save() {\n    if (this.addbankForm.value.contactBankName != '' || this.addbankForm.value.contactBankAddress != ''\n      || this.addbankForm.value.contactBankRoutingNumber != '' || this.addbankForm.value.contactBankAccountNum != '') {\n      this.loadSave = true;\n      this.addInsurance.saveBankInformation(this.addbankForm.value).subscribe((result: any) => {\n        if (result.statusCode == 200) {\n          this.toaster.success(result.responseMessage);\n          setTimeout(() => { this.loadSave = false; }, 3000);\n        }\n        else {\n          this.toaster.error(result.responseMessage);\n        }\n      }, error => {\n        this.loadSave = false;\n      })\n    }\n  }\n\n\n  get contactBankName() { return this.addbankForm.get('contactBankName'); }\n  get contactBankAddress() { return this.addbankForm.get('contactBankAddress'); }\n  get contactBankRoutingNumber() { return this.addbankForm.get('contactBankRoutingNumber'); }\n  get contactBankAccountNum() { return this.addbankForm.get('contactBankAccountNum'); }\n\n  get contactBankCity() { return this.addbankForm.get('contactBankCity'); }\n  get contactBankCounty() { return this.addbankForm.get('contactBankCounty'); }\n  get contactBankState() { return this.addbankForm.get('contactBankState'); }\n  get contactBankZipcode() { return this.addbankForm.get('contactBankZipcode'); }\n  \n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BankInformationRoutingModule } from './bank-information-routing.module';\nimport { BankInformationComponent } from './bank-information.component';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\n@NgModule({\n  declarations: [BankInformationComponent],\n  imports: [\n    CommonModule,\n    BankInformationRoutingModule,\n    SharedModule\n  ]\n})\nexport class BankInformationModule { }\n","import { Injectable } from '@angular/core';\nimport { environment } from 'src/environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class BankInformationService {\n\n  public bankUri = `${environment.WebApiBaseUrl}Contact`;\n  constructor(private http: HttpClient) { }\n\n  getBankInformation(userId: string) {\n    return this.http.get(`${this.bankUri}/GetBankInformationByContactBankId?contactBankId=${userId}`)\n  }\n  saveBankInformation(bankInfo: BankInformation) {\n    return this.http.post(`${this.bankUri}/SaveContactBankInformation`, bankInfo);\r\n  }\n}\n\nexport class BankInformation {\r\n  contactBankId: string;\r\n  contactBankName: string;\r\n  contactBankAddress: string;\r\n  contactBankAccountNum: string;\r\n  contactBankRoutingNumber: string;\r\n \r\n  constructor() {\r\n    this.contactBankId = \"\";\r\n    this.contactBankName = \"\";\r\n    this.contactBankAddress = \"\";\r\n    this.contactBankAccountNum = \"\";\r\n    this.contactBankRoutingNumber = \"\";\r\n  }\r\n}\n"],"sourceRoot":"webpack:///"}